<!DOCTYPE html><html><head>
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta http-equiv="content-type" content="text/html; charset=UTF-8">

<title>The UINT Collating Sequence</title>
<!-- path= -->
</head>
<body>

<script>
function toggle_div(nm) {
var w = document.getElementById(nm);
if( w.style.display=="block" ){
w.style.display = "none";
}else{
w.style.display = "block";
}
}
function toggle_search() {
var w = document.getElementById("searchmenu");
if( w.style.display=="block" ){
w.style.display = "none";
} else {
w.style.display = "block";
setTimeout(function(){
document.getElementById("searchbox").focus()
}, 30);
}
}
function div_off(nm){document.getElementById(nm).style.display="none";}
window.onbeforeunload = function(e){div_off("submenu");}
/* Disable the Search feature if we are not operating from CGI, since */
/* Search is accomplished using CGI and will not work without it. */
if( !location.origin || !location.origin.match || !location.origin.match(/http/) ){
document.getElementById("search_menubutton").style.display = "none";
}
/* Used by the Hide/Show button beside syntax diagrams, to toggle the */
function hideorshow(btn,obj){
var x = document.getElementById(obj);
var b = document.getElementById(btn);
if( x.style.display!='none' ){
x.style.display = 'none';
b.innerHTML='show';
}else{
x.style.display = '';
b.innerHTML='hide';
}
return false;
}
var antiRobot = 0;
function antiRobotGo(){
if( antiRobot!=3 ) return;
antiRobot = 7;
var j = document.getElementById("mtimelink");
if(j && j.hasAttribute("data-href")) j.href=j.getAttribute("data-href");
}
function antiRobotDefense(){
document.body.onmousedown=function(){
antiRobot |= 2;
antiRobotGo();
document.body.onmousedown=null;
}
document.body.onmousemove=function(){
antiRobot |= 2;
antiRobotGo();
document.body.onmousemove=null;
}
setTimeout(function(){
antiRobot |= 1;
antiRobotGo();
}, 100)
antiRobotGo();
}
antiRobotDefense();
</script>
<div class="fancy">






<h1 id="overview"><span>1. </span>Overview</h1>

<p> The UINT collating sequence is a <a href="loadext.htm">loadable extension</a> for
SQLite that implements a new collating sequence that compares text
containing unsigned integers in numeric order.

</p><p> The UINT collating sequence is not a standard part of SQLite.
It must be loaded as a separate extension.  The source code to
UINT is in the <a href="https://sqlite.org/src/file/ext/misc/uint.c">uint.c source file</a>
in the <a href="https://sqlite.org/src/file/ext/misc">ext/misc/ folder</a> of the
SQLite source tree.

</p><p> The UINT collating sequence is not included in standard builds of
the SQLite library, but it is loaded by default in the <a href="cli.htm">CLI</a>.  This
is typical of the <a href="cli.htm">CLI</a> which loads various extensions above and beyond
what are available in the standard SQLite library.

</p><p> The UINT collating sequence works just like the default
BINARY collating sequence for text, except that embedded strings
of digits compare in numeric order.

</p><ul>
<li><p>
Leading zeros are handled properly, in the sense that
they do not mess with the maginitude comparison of embedded
strings of digits.  "x00123y" is equal to "x123y".

</p></li><li><p>
Only unsigned integers are recognized.  Plus and minus
signs are ignored.  Decimal points and exponential notation
are ignored.

</p></li><li><p>
Embedded integers can be of arbitrary length.  Comparison
is not limited to integers that can be expressed as a
64-bit machine integer.
</p></li></ul>

<h1 id="example_"><span>2. </span>Example:</h1>

<blockquote>
<table border="1" cellspacing="0" cellpadding="10">
<tbody><tr><th>COLLATE binary</th><th>COLLATE uint</th></tr>
<tr><td valign="top" align="left"><pre>'0000123457'
'123456'
'abc0000000010xyz'
'abc0010xyy'
'abc10xzz'
'abc674xyz'
'abc87xyz'
'abc9xyz'</pre></td>
<td valign="top" align="left"><pre>'123456'
'0000123457'
'abc9xyz'
'abc0010xyy'
'abc0000000010xyz'
'abc10xzz'
'abc87xyz'
'abc674xyz'</pre></td>
</tr></tbody></table>
</blockquote>


</div></body></html>