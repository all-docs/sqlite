<!DOCTYPE html><html><head>
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta http-equiv="content-type" content="text/html; charset=UTF-8">

<title>List Of Virtual Tables</title>
<!-- path= -->
</head>
<body>

<script>
function toggle_div(nm) {
var w = document.getElementById(nm);
if( w.style.display=="block" ){
w.style.display = "none";
}else{
w.style.display = "block";
}
}
function toggle_search() {
var w = document.getElementById("searchmenu");
if( w.style.display=="block" ){
w.style.display = "none";
} else {
w.style.display = "block";
setTimeout(function(){
document.getElementById("searchbox").focus()
}, 30);
}
}
function div_off(nm){document.getElementById(nm).style.display="none";}
window.onbeforeunload = function(e){div_off("submenu");}
/* Disable the Search feature if we are not operating from CGI, since */
/* Search is accomplished using CGI and will not work without it. */
if( !location.origin || !location.origin.match || !location.origin.match(/http/) ){
document.getElementById("search_menubutton").style.display = "none";
}
/* Used by the Hide/Show button beside syntax diagrams, to toggle the */
function hideorshow(btn,obj){
var x = document.getElementById(obj);
var b = document.getElementById(btn);
if( x.style.display!='none' ){
x.style.display = 'none';
b.innerHTML='show';
}else{
x.style.display = '';
b.innerHTML='hide';
}
return false;
}
var antiRobot = 0;
function antiRobotGo(){
if( antiRobot!=3 ) return;
antiRobot = 7;
var j = document.getElementById("mtimelink");
if(j && j.hasAttribute("data-href")) j.href=j.getAttribute("data-href");
}
function antiRobotDefense(){
document.body.onmousedown=function(){
antiRobot |= 2;
antiRobotGo();
document.body.onmousedown=null;
}
document.body.onmousemove=function(){
antiRobot |= 2;
antiRobotGo();
document.body.onmousemove=null;
}
setTimeout(function(){
antiRobot |= 1;
antiRobotGo();
}, 100)
antiRobotGo();
}
antiRobotDefense();
</script>
<div class="fancy">







<h1 id="introduction"><span>1. </span>Introduction</h1>

<p>A <a href="vtab.htm">virtual table</a> is an object that presents an SQL table
interface but which is not stored in the database file, at least
not directly.  The virtual table mechanism is a feature
of SQLite that allows SQLite to access and manipulate resources
other than bits in the database file using the powerful SQL
query language.

</p><p>
The table below lists a few of the virtual table implementations
available for SQLite.  Developers can deploy these virtual tables
in their own applications, or use the implementations shown below
as templates for writing their own virtual tables.

</p><p>
The list below is not exhaustive.
Other virtual table implementations exist in the SQLite source tree
and elsewhere.
The list below tries to capture the more interesting virtual table
implementations.



</p><h1 id="virtual_tables"><span>2. </span>Virtual Tables</h1>

<table striped="1" style="margin:1em auto; width:80%; border-spacing:0">
<tbody><tr style="text-align:left"><th>Name</th><th>Description</th></tr>
<tr style="text-align:left;background-color:#DDDDDD;"><td><b><a href="https://sqlite.org/src/file/ext/misc/amatch.c">approximate_match</a></b></td>
<td>A demonstration of how to use a virtual table to implement
    approximate string matching.</td></tr>
<tr style="text-align:left;"><td><b><a href="bytecodevtab.htm">bytecode</a></b></td>
<td>A <a href="vtab.htm">table-valued function</a> that shows the bytecodes of a prepared
    statement.</td></tr>
<tr style="text-align:left;background-color:#DDDDDD;"><td><b><a href="carray.htm">carray</a></b></td>
<td>A <a href="vtab.htm">table-valued function</a> that allows a C-language array of integers,
    doubles, or strings to be used as a table in a query.</td></tr>
<tr style="text-align:left;"><td><b><a href="https://sqlite.org/src/file/ext/misc/closure.c">closure</a></b></td>
<td>Compute the transitive closure of a set.</td></tr>
<tr style="text-align:left;background-color:#DDDDDD;"><td><b><a href="completion.htm">completion</a></b></td>
<td>Suggests completions for partially-entered words during interactive
    SQL input.  Used by the <a href="cli.htm">CLI</a> to help implement tab-completion.</td></tr>
<tr style="text-align:left;"><td><b><a href="csv.htm">csv</a></b></td>
<td>A virtual table that represents a comma-separated-value or CSV file
    (<a href="https://www.ietf.org/rfc/rfc4180.txt">RFC 4180</a>) as a read-only
    table so that it can be used as part of a larger query.</td></tr>
<tr style="text-align:left;background-color:#DDDDDD;"><td><b><a href="dbstat.htm">dbstat</a></b></td>
<td>Provides information about the purpose and use of each page in a
    database file.  Used in the implementation of the
    <a href="sqlanalyze.htm">sqlite3_analyzer</a> utility program.</td></tr>
<tr style="text-align:left;"><td><b><a href="https://fossil-scm.org/fossil/file/src/foci.c">files_of_checkin</a></b></td>
<td>Provides information about all files in a single check-in in the
    <a href="https://fossil-scm.org/">Fossil version control system</a>.  This
    virtual table is not part of the SQLite project but is included because
    it provides an example of how to use virtual tables and because it is
    used to help version control the SQLite sources.</td></tr>
<tr style="text-align:left;background-color:#DDDDDD;"><td><b><a href="https://sqlite.org/src/file/ext/misc/fileio.c">fsdir</a></b></td>
<td>A <a href="vtab.htm">table-valued function</a> returning one row for each file in a
    selected file hierarchy of the host computer.  Used by the
    <a href="cli.htm">CLI</a> to help implement the <a href="cli.htm">.archive command</a>.</td></tr>
<tr style="text-align:left;"><td><b><a href="fts3.htm">FTS3</a></b></td>
<td>A high-performance full-text search index.</td></tr>
<tr style="text-align:left;background-color:#DDDDDD;"><td><b><a href="fts5.htm">FTS5</a></b></td>
<td>A higher-performance full-text search index</td></tr>
<tr style="text-align:left;"><td><b><a href="series.htm">generate_series</a></b></td>
<td>A <a href="vtab.htm">table-valued function</a> returning a sequence of
    integers, modeled after the table-valued function by the same
    name in PostgreSQL.</td></tr>
<tr style="text-align:left;background-color:#DDDDDD;"><td><b><a href="json1.htm">json_each</a></b></td>
<td>A <a href="vtab.htm">table-valued function</a> for decomposing a JSON string.</td></tr>
<tr style="text-align:left;"><td><b><a href="json1.htm">json_tree</a></b></td>
<td>A <a href="vtab.htm">table-valued function</a> for decomposing a JSON string.</td></tr>
<tr style="text-align:left;background-color:#DDDDDD;"><td><b><a href="https://osquery.readthedocs.io/en/stable/">OsQuery</a></b></td>
<td>Hundreds of virtual tables that publish various aspects of the
    host computer, such as the process table, user lists, active network
    connections, and so forth.
    OsQuery is a separate project, started by Facebook, hosted on
    <a href="https://github.com/facebook/osquery">GitHub</a>, and intended for
    security analysis and intrusion detection.
    OsQuery is not a part of the SQLite project, but is included in this
    list because it demonstrates how the SQL language and the
    SQLite virtual table mechanism
    can be leveraged to provide elegant solutions
    to important real-world problems.</td></tr>
<tr style="text-align:left;"><td><b><a href="pragma.htm">pragma</a></b></td>
<td>Built-in <a href="vtab.htm">table-valued functions</a> that return the results of <a href="pragma.htm">PRAGMA</a>
    statements for use within ordinary SQL queries.</td></tr>
<tr style="text-align:left;background-color:#DDDDDD;"><td><b><a href="rtree.htm">RTree</a></b></td>
<td>An implementation of the Guttmann R*Tree spatial index idea.</td></tr>
<tr style="text-align:left;"><td><b><a href="spellfix1.htm">spellfix1</a></b></td>
<td>A virtual table that implements a spelling correction engine.</td></tr>
<tr style="text-align:left;background-color:#DDDDDD;"><td><b><a href="https://sqlite.org/src/file/ext/misc/btreeinfo.c">sqlite_btreeinfo</a></b></td>
<td>This experimental <a href="vtab.htm">table-valued function</a> provides information about
    a single <a href="fileformat2.htm">B-tree</a> in a database file, such as the depth, and estimated
    number of pages and number of entries, and so forth.</td></tr>
<tr style="text-align:left;"><td><b><a href="dbpage.htm">sqlite_dbpage</a></b></td>
<td>Key/value store for the raw database file content.  The key is the
    page number and the value is binary page content.</td></tr>
<tr style="text-align:left;background-color:#DDDDDD;"><td><b><a href="memstat.htm">sqlite_memstat</a></b></td>
<td>Provides SQL access to the <a href="c3ref\status.htm">sqlite3_status64()</a> and
    <a href="c3ref\db_status.htm">sqlite3_db_status()</a> interfaces.</td></tr>
<tr style="text-align:left;"><td><b><a href="stmt.htm">sqlite_stmt</a></b></td>
<td>A <a href="vtab.htm">table-valued function</a> containing one row for each
    <a href="c3ref\stmt.htm">prepared statement</a> associated with an open <a href="c3ref\sqlite3.htm">database connection</a>.</td></tr>
<tr style="text-align:left;background-color:#DDDDDD;"><td><b><a href="swarmvtab.htm">swarmvtab</a></b></td>
<td>An experimental module providing on-demand read-only access to
    multiple tables spread across multiple databases, via a single
    virtual table abstraction.</td></tr>
<tr style="text-align:left;"><td><b><a href="bytecodevtab.htm">tables_used</a></b></td>
<td>A <a href="vtab.htm">table-valued function</a> that shows the tables and indexes that
    are accessed by a prepared statement.</td></tr>
<tr style="text-align:left;background-color:#DDDDDD;"><td><b><a href="https://sqlite.org/src/file/src/test_tclvar.c">tclvar</a></b></td>
<td>Represents the global variables of a 
    <a href="https://en.wikipedia.org/wiki/Tcl">TCL Interpreter</a> as an SQL
    table. Used as part of the SQLite test suite.</td></tr>
<tr style="text-align:left;"><td><b><a href="https://sqlite.org/src/file/ext/misc/templatevtab.c">templatevtab</a></b></td>
<td>A template virtual table implementation useful as a starting point
    for developers who want to write their own virtual tables</td></tr>
<tr style="text-align:left;background-color:#DDDDDD;"><td><b><a href="unionvtab.htm">unionvtab</a></b></td>
<td>An experimental module providing on-demand read-only access to
    multiple tables spread across multiple databases, via a single
    virtual table abstraction.</td></tr>
<tr style="text-align:left;"><td><b><a href="https://sqlite.org/src/file/ext/misc/vfsstat.c">vfsstat</a></b></td>
<td>A <a href="vtab.htm">table-valued function</a> which, in combination with a
    co-packaged <a href="vfs.htm">VFS shim</a> provides information on the number of
    system calls performed by SQLite.</td></tr>
<tr style="text-align:left;background-color:#DDDDDD;"><td><b><a href="https://sqlite.org/src/file/ext/misc/vtablog.c">vtablog</a></b></td>
<td>A virtual table that prints diagnostic information
    on stdout when its key methods are invoked.  Intended for
    interactive analysis and debugging of virtual table interfaces.</td></tr>
<tr style="text-align:left;"><td><b><a href="https://sqlite.org/src/file/ext/misc/wholenumber.c">wholenumber</a></b></td>
<td>A virtual table returns all integers between 1 and 4294967295.</td></tr>
<tr style="text-align:left;background-color:#DDDDDD;"><td><b><a href="zipfile.htm">zipfile</a></b></td>
<td>Represent a
    <a href="https://en.wikipedia.org/wiki/Zip_(file_format)">ZIP Archive</a>
    as an SQL table.  Works for both reading and writing.  Used by
    the <a href="cli.htm">CLI</a> to implement the ability to read and write ZIP Archives.</td></tr>

</tbody></table>
<p align="center"><small><i>This page last modified on  <a href="https://sqlite.org/docsrc/honeypot" id="mtimelink" data-href="https://sqlite.org/docsrc/finfo/pages/vtablist.in?m=fbf6d2ca26">2025-05-31 13:08:22</a> UTC </i></small></p>

</div></body></html>