<!DOCTYPE html><html><head>
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta http-equiv="content-type" content="text/html; charset=UTF-8">

<title>Determine If Virtual Table Column Access Is For UPDATE</title>
<!-- path=../ -->
</head>
<body>

<script>
function toggle_div(nm) {
var w = document.getElementById(nm);
if( w.style.display=="block" ){
w.style.display = "none";
}else{
w.style.display = "block";
}
}
function toggle_search() {
var w = document.getElementById("searchmenu");
if( w.style.display=="block" ){
w.style.display = "none";
} else {
w.style.display = "block";
setTimeout(function(){
document.getElementById("searchbox").focus()
}, 30);
}
}
function div_off(nm){document.getElementById(nm).style.display="none";}
window.onbeforeunload = function(e){div_off("submenu");}
/* Disable the Search feature if we are not operating from CGI, since */
/* Search is accomplished using CGI and will not work without it. */
if( !location.origin || !location.origin.match || !location.origin.match(/http/) ){
document.getElementById("search_menubutton").style.display = "none";
}
/* Used by the Hide/Show button beside syntax diagrams, to toggle the */
function hideorshow(btn,obj){
var x = document.getElementById(obj);
var b = document.getElementById(btn);
if( x.style.display!='none' ){
x.style.display = 'none';
b.innerHTML='show';
}else{
x.style.display = '';
b.innerHTML='hide';
}
return false;
}
var antiRobot = 0;
function antiRobotGo(){
if( antiRobot!=3 ) return;
antiRobot = 7;
var j = document.getElementById("mtimelink");
if(j && j.hasAttribute("data-href")) j.href=j.getAttribute("data-href");
}
function antiRobotDefense(){
document.body.onmousedown=function(){
antiRobot |= 2;
antiRobotGo();
document.body.onmousedown=null;
}
document.body.onmousemove=function(){
antiRobot |= 2;
antiRobotGo();
document.body.onmousemove=null;
}
setTimeout(function(){
antiRobot |= 1;
antiRobotGo();
}, 100)
antiRobotGo();
}
antiRobotDefense();
</script>
<!-- keywords: sqlite3_vtab_nochange -->

<blockquote><pre>int sqlite3_vtab_nochange(sqlite3_context*);
</pre></blockquote>
<p>
If the sqlite3_vtab_nochange(X) routine is called within the <a href="../vtab.html#xcolumn">xColumn</a>
method of a <a href="../vtab.html">virtual table</a>, then it might return true if the
column is being fetched as part of an UPDATE operation during which the
column value will not change.  The virtual table implementation can use
this hint as permission to substitute a return value that is less
expensive to compute and that the corresponding
<a href="../vtab.html#xupdate">xUpdate</a> method understands as a "no-change" value.</p>

<p>If the <a href="../vtab.html#xcolumn">xColumn</a> method calls sqlite3_vtab_nochange() and finds that
the column is not changed by the UPDATE statement, then the xColumn
method can optionally return without setting a result, without calling
any of the <a href="result_blob.htm">sqlite3_result_xxxxx() interfaces</a>.
In that case, <a href="value_blob.htm">sqlite3_value_nochange(X)</a> will return true for the
same column in the <a href="../vtab.html#xupdate">xUpdate</a> method.</p>

<p>The sqlite3_vtab_nochange() routine is an optimization.  Virtual table
implementations should continue to give a correct answer even if the
sqlite3_vtab_nochange() interface were to always return false.  In the
current implementation, the sqlite3_vtab_nochange() interface does always
returns false for the enhanced <a href="../lang_update.html#upfrom">UPDATE FROM</a> statement.
</p><p>See also lists of
  <a href="objlist.htm">Objects</a>,
  <a href="constlist.htm">Constants</a>, and
  <a href="funclist.htm">Functions</a>.</p>

</body></html>