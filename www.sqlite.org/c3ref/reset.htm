<!DOCTYPE html><html><head>
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta http-equiv="content-type" content="text/html; charset=UTF-8">

<title>Reset A Prepared Statement Object</title>
<!-- path=../ -->
</head>
<body>

<script>
function toggle_div(nm) {
var w = document.getElementById(nm);
if( w.style.display=="block" ){
w.style.display = "none";
}else{
w.style.display = "block";
}
}
function toggle_search() {
var w = document.getElementById("searchmenu");
if( w.style.display=="block" ){
w.style.display = "none";
} else {
w.style.display = "block";
setTimeout(function(){
document.getElementById("searchbox").focus()
}, 30);
}
}
function div_off(nm){document.getElementById(nm).style.display="none";}
window.onbeforeunload = function(e){div_off("submenu");}
/* Disable the Search feature if we are not operating from CGI, since */
/* Search is accomplished using CGI and will not work without it. */
if( !location.origin || !location.origin.match || !location.origin.match(/http/) ){
document.getElementById("search_menubutton").style.display = "none";
}
/* Used by the Hide/Show button beside syntax diagrams, to toggle the */
function hideorshow(btn,obj){
var x = document.getElementById(obj);
var b = document.getElementById(btn);
if( x.style.display!='none' ){
x.style.display = 'none';
b.innerHTML='show';
}else{
x.style.display = '';
b.innerHTML='hide';
}
return false;
}
var antiRobot = 0;
function antiRobotGo(){
if( antiRobot!=3 ) return;
antiRobot = 7;
var j = document.getElementById("mtimelink");
if(j && j.hasAttribute("data-href")) j.href=j.getAttribute("data-href");
}
function antiRobotDefense(){
document.body.onmousedown=function(){
antiRobot |= 2;
antiRobotGo();
document.body.onmousedown=null;
}
document.body.onmousemove=function(){
antiRobot |= 2;
antiRobotGo();
document.body.onmousemove=null;
}
setTimeout(function(){
antiRobot |= 1;
antiRobotGo();
}, 100)
antiRobotGo();
}
antiRobotDefense();
</script>
<!-- keywords: sqlite3_reset -->

<blockquote><pre>int sqlite3_reset(sqlite3_stmt *pStmt);
</pre></blockquote>
<p>
The sqlite3_reset() function is called to reset a <a href="stmt.htm">prepared statement</a>
object back to its initial state, ready to be re-executed.
Any SQL statement variables that had values bound to them using
the <a href="bind_blob.htm">sqlite3_bind_*() API</a> retain their values.
Use <a href="clear_bindings.htm">sqlite3_clear_bindings()</a> to reset the bindings.</p>

<p>The <a href="reset.htm">sqlite3_reset(S)</a> interface resets the <a href="stmt.htm">prepared statement</a> S
back to the beginning of its program.</p>

<p>The return code from <a href="reset.htm">sqlite3_reset(S)</a> indicates whether or not
the previous evaluation of prepared statement S completed successfully.
If <a href="step.htm">sqlite3_step(S)</a> has never before been called on S or if
<a href="step.htm">sqlite3_step(S)</a> has not been called since the previous call
to <a href="reset.htm">sqlite3_reset(S)</a>, then <a href="reset.htm">sqlite3_reset(S)</a> will return
<a href="../rescode.html#ok">SQLITE_OK</a>.</p>

<p>If the most recent call to <a href="step.htm">sqlite3_step(S)</a> for the
<a href="stmt.htm">prepared statement</a> S indicated an error, then
<a href="reset.htm">sqlite3_reset(S)</a> returns an appropriate <a href="../rescode.html">error code</a>.
The <a href="reset.htm">sqlite3_reset(S)</a> interface might also return an <a href="../rescode.html">error code</a>
if there were no prior errors but the process of resetting
the prepared statement caused a new error. For example, if an
<a href="../lang_insert.html">INSERT</a> statement with a <a href="../lang_returning.html">RETURNING</a> clause is only stepped one time,
that one call to <a href="step.htm">sqlite3_step(S)</a> might return SQLITE_ROW but
the overall statement might still fail and the <a href="reset.htm">sqlite3_reset(S)</a> call
might return SQLITE_BUSY if locking constraints prevent the
database change from committing.  Therefore, it is important that
applications check the return code from <a href="reset.htm">sqlite3_reset(S)</a> even if
no prior call to <a href="step.htm">sqlite3_step(S)</a> indicated a problem.</p>

<p>The <a href="reset.htm">sqlite3_reset(S)</a> interface does not change the values
of any <a href="bind_blob.htm">bindings</a> on the <a href="stmt.htm">prepared statement</a> S.
</p><p>See also lists of
  <a href="objlist.htm">Objects</a>,
  <a href="constlist.htm">Constants</a>, and
  <a href="funclist.htm">Functions</a>.</p>

</body></html>