<!DOCTYPE html><html><head>
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta http-equiv="content-type" content="text/html; charset=UTF-8">

<title>Function Auxiliary Data</title>
<!-- path=../ -->
</head>
<body>

<script>
function toggle_div(nm) {
var w = document.getElementById(nm);
if( w.style.display=="block" ){
w.style.display = "none";
}else{
w.style.display = "block";
}
}
function toggle_search() {
var w = document.getElementById("searchmenu");
if( w.style.display=="block" ){
w.style.display = "none";
} else {
w.style.display = "block";
setTimeout(function(){
document.getElementById("searchbox").focus()
}, 30);
}
}
function div_off(nm){document.getElementById(nm).style.display="none";}
window.onbeforeunload = function(e){div_off("submenu");}
/* Disable the Search feature if we are not operating from CGI, since */
/* Search is accomplished using CGI and will not work without it. */
if( !location.origin || !location.origin.match || !location.origin.match(/http/) ){
document.getElementById("search_menubutton").style.display = "none";
}
/* Used by the Hide/Show button beside syntax diagrams, to toggle the */
function hideorshow(btn,obj){
var x = document.getElementById(obj);
var b = document.getElementById(btn);
if( x.style.display!='none' ){
x.style.display = 'none';
b.innerHTML='show';
}else{
x.style.display = '';
b.innerHTML='hide';
}
return false;
}
var antiRobot = 0;
function antiRobotGo(){
if( antiRobot!=3 ) return;
antiRobot = 7;
var j = document.getElementById("mtimelink");
if(j && j.hasAttribute("data-href")) j.href=j.getAttribute("data-href");
}
function antiRobotDefense(){
document.body.onmousedown=function(){
antiRobot |= 2;
antiRobotGo();
document.body.onmousedown=null;
}
document.body.onmousemove=function(){
antiRobot |= 2;
antiRobotGo();
document.body.onmousemove=null;
}
setTimeout(function(){
antiRobot |= 1;
antiRobotGo();
}, 100)
antiRobotGo();
}
antiRobotDefense();
</script>
<!-- keywords: sqlite3_get_auxdata sqlite3_set_auxdata -->

<blockquote><pre>void *sqlite3_get_auxdata(sqlite3_context*, int N);
void sqlite3_set_auxdata(sqlite3_context*, int N, void*, void (*)(void*));
</pre></blockquote>
<p>
These functions may be used by (non-aggregate) SQL functions to
associate auxiliary data with argument values. If the same argument
value is passed to multiple invocations of the same SQL function during
query execution, under some circumstances the associated auxiliary data
might be preserved.  An example of where this might be useful is in a
regular-expression matching function. The compiled version of the regular
expression can be stored as auxiliary data associated with the pattern string.
Then as long as the pattern string remains the same,
the compiled regular expression can be reused on multiple
invocations of the same function.</p>

<p>The sqlite3_get_auxdata(C,N) interface returns a pointer to the auxiliary data
associated by the sqlite3_set_auxdata(C,N,P,X) function with the Nth argument
value to the application-defined function.  N is zero for the left-most
function argument.  If there is no auxiliary data
associated with the function argument, the sqlite3_get_auxdata(C,N) interface
returns a NULL pointer.</p>

<p>The sqlite3_set_auxdata(C,N,P,X) interface saves P as auxiliary data for the
N-th argument of the application-defined function.  Subsequent
calls to sqlite3_get_auxdata(C,N) return P from the most recent
sqlite3_set_auxdata(C,N,P,X) call if the auxiliary data is still valid or
NULL if the auxiliary data has been discarded.
After each call to sqlite3_set_auxdata(C,N,P,X) where X is not NULL,
SQLite will invoke the destructor function X with parameter P exactly
once, when the auxiliary data is discarded.
SQLite is free to discard the auxiliary data at any time, including: </p><ul>
<li> when the corresponding function parameter changes, or
</li><li> when <a href="reset.htm">sqlite3_reset()</a> or <a href="finalize.htm">sqlite3_finalize()</a> is called for the
SQL statement, or
</li><li> when sqlite3_set_auxdata() is invoked again on the same
parameter, or
</li><li> during the original sqlite3_set_auxdata() call when a memory
allocation error occurs.
</li><li> during the original sqlite3_set_auxdata() call if the function
is evaluated during query planning instead of during query execution,
as sometimes happens with <a href="../compile.html#enable_stat4">SQLITE_ENABLE_STAT4</a>. </li></ul><p></p>

<p>Note the last two bullets in particular.  The destructor X in
sqlite3_set_auxdata(C,N,P,X) might be called immediately, before the
sqlite3_set_auxdata() interface even returns.  Hence sqlite3_set_auxdata()
should be called near the end of the function implementation and the
function implementation should not make any use of P after
sqlite3_set_auxdata() has been called.  Furthermore, a call to
sqlite3_get_auxdata() that occurs immediately after a corresponding call
to sqlite3_set_auxdata() might still return NULL if an out-of-memory
condition occurred during the sqlite3_set_auxdata() call or if the
function is being evaluated during query planning rather than during
query execution.</p>

<p>In practice, auxiliary data is preserved between function calls for
function parameters that are compile-time constants, including literal
values and <a href="../lang_expr.html#varparam">parameters</a> and expressions composed from the same.</p>

<p>The value of the N parameter to these interfaces should be non-negative.
Future enhancements may make use of negative N values to define new
kinds of function caching behavior.</p>

<p>These routines must be called from the same thread in which
the SQL function is running.</p>

<p>See also: <a href="get_clientdata.htm">sqlite3_get_clientdata()</a> and <a href="get_clientdata.htm">sqlite3_set_clientdata()</a>.
</p><p>See also lists of
  <a href="objlist.htm">Objects</a>,
  <a href="constlist.htm">Constants</a>, and
  <a href="funclist.htm">Functions</a>.</p>

</body></html>