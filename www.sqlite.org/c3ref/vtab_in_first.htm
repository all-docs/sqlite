<!DOCTYPE html><html><head>
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta http-equiv="content-type" content="text/html; charset=UTF-8">

<title>Find all elements on the right-hand side of an IN constraint.</title>
<!-- path=../ -->
</head>
<body>

<script>
function toggle_div(nm) {
var w = document.getElementById(nm);
if( w.style.display=="block" ){
w.style.display = "none";
}else{
w.style.display = "block";
}
}
function toggle_search() {
var w = document.getElementById("searchmenu");
if( w.style.display=="block" ){
w.style.display = "none";
} else {
w.style.display = "block";
setTimeout(function(){
document.getElementById("searchbox").focus()
}, 30);
}
}
function div_off(nm){document.getElementById(nm).style.display="none";}
window.onbeforeunload = function(e){div_off("submenu");}
/* Disable the Search feature if we are not operating from CGI, since */
/* Search is accomplished using CGI and will not work without it. */
if( !location.origin || !location.origin.match || !location.origin.match(/http/) ){
document.getElementById("search_menubutton").style.display = "none";
}
/* Used by the Hide/Show button beside syntax diagrams, to toggle the */
function hideorshow(btn,obj){
var x = document.getElementById(obj);
var b = document.getElementById(btn);
if( x.style.display!='none' ){
x.style.display = 'none';
b.innerHTML='show';
}else{
x.style.display = '';
b.innerHTML='hide';
}
return false;
}
var antiRobot = 0;
function antiRobotGo(){
if( antiRobot!=3 ) return;
antiRobot = 7;
var j = document.getElementById("mtimelink");
if(j && j.hasAttribute("data-href")) j.href=j.getAttribute("data-href");
}
function antiRobotDefense(){
document.body.onmousedown=function(){
antiRobot |= 2;
antiRobotGo();
document.body.onmousedown=null;
}
document.body.onmousemove=function(){
antiRobot |= 2;
antiRobotGo();
document.body.onmousemove=null;
}
setTimeout(function(){
antiRobot |= 1;
antiRobotGo();
}, 100)
antiRobotGo();
}
antiRobotDefense();
</script>
<!-- keywords: sqlite3_vtab_in_first sqlite3_vtab_in_next -->

<blockquote><pre>int sqlite3_vtab_in_first(sqlite3_value *pVal, sqlite3_value **ppOut);
int sqlite3_vtab_in_next(sqlite3_value *pVal, sqlite3_value **ppOut);
</pre></blockquote>
<p>
These interfaces are only useful from within the
<a href="../vtab.html#xfilter">xFilter() method</a> of a <a href="../vtab.html">virtual table</a> implementation.
The result of invoking these interfaces from any other context
is undefined and probably harmful.</p>

<p>The X parameter in a call to sqlite3_vtab_in_first(X,P) or
sqlite3_vtab_in_next(X,P) should be one of the parameters to the
xFilter method which invokes these routines, and specifically
a parameter that was previously selected for all-at-once IN constraint
processing use the <a href="vtab_in.htm">sqlite3_vtab_in()</a> interface in the
<a href="../vtab.html#xbestindex">xBestIndex method</a>.  If the X parameter is not
an xFilter argument that was selected for all-at-once IN constraint
processing, then these routines return <a href="../rescode.html#error">SQLITE_ERROR</a>.</p>

<p>Use these routines to access all values on the right-hand side
of the IN constraint using code like the following:</p>

<p></p><blockquote><pre>&nbsp;  for(rc=sqlite3_vtab_in_first(pList, &amp;pVal);
&nbsp;      rc==SQLITE_OK &amp;&amp; pVal;
&nbsp;      rc=sqlite3_vtab_in_next(pList, &amp;pVal)
&nbsp;  ){
&nbsp;    // do something with pVal
&nbsp;  }
&nbsp;  if( rc!=SQLITE_OK ){
&nbsp;    // an error has occurred
&nbsp;  }
</pre></blockquote><p></p>

<p>On success, the sqlite3_vtab_in_first(X,P) and sqlite3_vtab_in_next(X,P)
routines return SQLITE_OK and set *P to point to the first or next value
on the RHS of the IN constraint.  If there are no more values on the
right hand side of the IN constraint, then *P is set to NULL and these
routines return <a href="../rescode.html#done">SQLITE_DONE</a>.  The return value might be
some other value, such as SQLITE_NOMEM, in the event of a malfunction.</p>

<p>The *ppOut values returned by these routines are only valid until the
next call to either of these routines or until the end of the xFilter
method from which these routines were called.  If the virtual table
implementation needs to retain the *ppOut values for longer, it must make
copies.  The *ppOut values are <a href="value.htm">protected</a>.
</p><p>See also lists of
  <a href="objlist.htm">Objects</a>,
  <a href="constlist.htm">Constants</a>, and
  <a href="funclist.htm">Functions</a>.</p>

</body></html>