<!DOCTYPE html><html><head>
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta http-equiv="content-type" content="text/html; charset=UTF-8">

<title>Enable Or Disable Extension Loading</title>
<!-- path=../ -->
</head>
<body>

<script>
function toggle_div(nm) {
var w = document.getElementById(nm);
if( w.style.display=="block" ){
w.style.display = "none";
}else{
w.style.display = "block";
}
}
function toggle_search() {
var w = document.getElementById("searchmenu");
if( w.style.display=="block" ){
w.style.display = "none";
} else {
w.style.display = "block";
setTimeout(function(){
document.getElementById("searchbox").focus()
}, 30);
}
}
function div_off(nm){document.getElementById(nm).style.display="none";}
window.onbeforeunload = function(e){div_off("submenu");}
/* Disable the Search feature if we are not operating from CGI, since */
/* Search is accomplished using CGI and will not work without it. */
if( !location.origin || !location.origin.match || !location.origin.match(/http/) ){
document.getElementById("search_menubutton").style.display = "none";
}
/* Used by the Hide/Show button beside syntax diagrams, to toggle the */
function hideorshow(btn,obj){
var x = document.getElementById(obj);
var b = document.getElementById(btn);
if( x.style.display!='none' ){
x.style.display = 'none';
b.innerHTML='show';
}else{
x.style.display = '';
b.innerHTML='hide';
}
return false;
}
var antiRobot = 0;
function antiRobotGo(){
if( antiRobot!=3 ) return;
antiRobot = 7;
var j = document.getElementById("mtimelink");
if(j && j.hasAttribute("data-href")) j.href=j.getAttribute("data-href");
}
function antiRobotDefense(){
document.body.onmousedown=function(){
antiRobot |= 2;
antiRobotGo();
document.body.onmousedown=null;
}
document.body.onmousemove=function(){
antiRobot |= 2;
antiRobotGo();
document.body.onmousemove=null;
}
setTimeout(function(){
antiRobot |= 1;
antiRobotGo();
}, 100)
antiRobotGo();
}
antiRobotDefense();
</script>
<!-- keywords: sqlite3_enable_load_extension -->

<blockquote><pre>int sqlite3_enable_load_extension(sqlite3 *db, int onoff);
</pre></blockquote>
<p>
So as not to open security holes in older applications that are
unprepared to deal with <a href="../loadext.html">extension loading</a>, and as a means of disabling
<a href="../loadext.html">extension loading</a> while evaluating user-entered SQL, the following API
is provided to turn the <a href="load_extension.htm">sqlite3_load_extension()</a> mechanism on and off.</p>

<p>Extension loading is off by default.
Call the sqlite3_enable_load_extension() routine with onoff==1
to turn extension loading on and call it with onoff==0 to turn
it back off again.</p>

<p>This interface enables or disables both the C-API
<a href="load_extension.htm">sqlite3_load_extension()</a> and the SQL function <a href="../lang_corefunc.html#load_extension">load_extension()</a>.
Use <a href="db_config.htm">sqlite3_db_config</a>(db,<a href="c_dbconfig_defensive.htm">SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION</a>,..)
to enable or disable only the C-API.</p>

<p><b>Security warning:</b> It is recommended that extension loading
be enabled using the <a href="c_dbconfig_defensive.htm">SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION</a> method
rather than this interface, so the <a href="../lang_corefunc.html#load_extension">load_extension()</a> SQL function
remains disabled. This will prevent SQL injections from giving attackers
access to extension loading capabilities.
</p><p>See also lists of
  <a href="objlist.htm">Objects</a>,
  <a href="constlist.htm">Constants</a>, and
  <a href="funclist.htm">Functions</a>.</p>

</body></html>