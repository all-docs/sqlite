<!DOCTYPE html><html><head>
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta http-equiv="content-type" content="text/html; charset=UTF-8">

<title>Start a read transaction on an historical snapshot</title>
<!-- path=../ -->
</head>
<body>

<script>
function toggle_div(nm) {
var w = document.getElementById(nm);
if( w.style.display=="block" ){
w.style.display = "none";
}else{
w.style.display = "block";
}
}
function toggle_search() {
var w = document.getElementById("searchmenu");
if( w.style.display=="block" ){
w.style.display = "none";
} else {
w.style.display = "block";
setTimeout(function(){
document.getElementById("searchbox").focus()
}, 30);
}
}
function div_off(nm){document.getElementById(nm).style.display="none";}
window.onbeforeunload = function(e){div_off("submenu");}
/* Disable the Search feature if we are not operating from CGI, since */
/* Search is accomplished using CGI and will not work without it. */
if( !location.origin || !location.origin.match || !location.origin.match(/http/) ){
document.getElementById("search_menubutton").style.display = "none";
}
/* Used by the Hide/Show button beside syntax diagrams, to toggle the */
function hideorshow(btn,obj){
var x = document.getElementById(obj);
var b = document.getElementById(btn);
if( x.style.display!='none' ){
x.style.display = 'none';
b.innerHTML='show';
}else{
x.style.display = '';
b.innerHTML='hide';
}
return false;
}
var antiRobot = 0;
function antiRobotGo(){
if( antiRobot!=3 ) return;
antiRobot = 7;
var j = document.getElementById("mtimelink");
if(j && j.hasAttribute("data-href")) j.href=j.getAttribute("data-href");
}
function antiRobotDefense(){
document.body.onmousedown=function(){
antiRobot |= 2;
antiRobotGo();
document.body.onmousedown=null;
}
document.body.onmousemove=function(){
antiRobot |= 2;
antiRobotGo();
document.body.onmousemove=null;
}
setTimeout(function(){
antiRobot |= 1;
antiRobotGo();
}, 100)
antiRobotGo();
}
antiRobotDefense();
</script>
<!-- keywords: sqlite3_snapshot_open -->

<blockquote><pre>int sqlite3_snapshot_open(
  sqlite3 *db,
  const char *zSchema,
  sqlite3_snapshot *pSnapshot
);
</pre></blockquote>
<p>
The <a href="snapshot_open.htm">sqlite3_snapshot_open(D,S,P)</a> interface either starts a new read
transaction or upgrades an existing one for schema S of
<a href="sqlite3.htm">database connection</a> D such that the read transaction refers to
historical <a href="snapshot.htm">snapshot</a> P, rather than the most recent change to the
database. The <a href="snapshot_open.htm">sqlite3_snapshot_open()</a> interface returns SQLITE_OK
on success or an appropriate <a href="../rescode.html">error code</a> if it fails.</p>

<p>In order to succeed, the database connection must not be in
<a href="get_autocommit.htm">autocommit mode</a> when <a href="snapshot_open.htm">sqlite3_snapshot_open(D,S,P)</a> is called. If there
is already a read transaction open on schema S, then the database handle
must have no active statements (SELECT statements that have been passed
to sqlite3_step() but not sqlite3_reset() or sqlite3_finalize()).
SQLITE_ERROR is returned if either of these conditions is violated, or
if schema S does not exist, or if the snapshot object is invalid.</p>

<p>A call to sqlite3_snapshot_open() will fail to open if the specified
snapshot has been overwritten by a <a href="../wal.html#ckpt">checkpoint</a>. In this case
SQLITE_ERROR_SNAPSHOT is returned.</p>

<p>If there is already a read transaction open when this function is
invoked, then the same read transaction remains open (on the same
database snapshot) if SQLITE_ERROR, SQLITE_BUSY or SQLITE_ERROR_SNAPSHOT
is returned. If another error code - for example SQLITE_PROTOCOL or an
SQLITE_IOERR error code - is returned, then the final state of the
read transaction is undefined. If SQLITE_OK is returned, then the
read transaction is now open on database snapshot P.</p>

<p>A call to <a href="snapshot_open.htm">sqlite3_snapshot_open(D,S,P)</a> will fail if the
database connection D does not know that the database file for
schema S is in <a href="../wal.html">WAL mode</a>.  A database connection might not know
that the database file is in <a href="../wal.html">WAL mode</a> if there has been no prior
I/O on that database connection, or if the database entered <a href="../wal.html">WAL mode</a>
after the most recent I/O on the database connection.
(Hint: Run "<a href="../pragma.html#pragma_application_id">PRAGMA application_id</a>" against a newly opened
database connection in order to make it ready to use snapshots.)</p>

<p>The <a href="snapshot_open.htm">sqlite3_snapshot_open()</a> interface is only available when the
<a href="../compile.html#enable_snapshot">SQLITE_ENABLE_SNAPSHOT</a> compile-time option is used.
</p><p>See also lists of
  <a href="objlist.htm">Objects</a>,
  <a href="constlist.htm">Constants</a>, and
  <a href="funclist.htm">Functions</a>.</p>

</body></html>