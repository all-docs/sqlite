<!DOCTYPE html><html><head>
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta http-equiv="content-type" content="text/html; charset=UTF-8">

<title>Determine The Collation For a Virtual Table Constraint</title>
<!-- path=../ -->
</head>
<body>

<script>
function toggle_div(nm) {
var w = document.getElementById(nm);
if( w.style.display=="block" ){
w.style.display = "none";
}else{
w.style.display = "block";
}
}
function toggle_search() {
var w = document.getElementById("searchmenu");
if( w.style.display=="block" ){
w.style.display = "none";
} else {
w.style.display = "block";
setTimeout(function(){
document.getElementById("searchbox").focus()
}, 30);
}
}
function div_off(nm){document.getElementById(nm).style.display="none";}
window.onbeforeunload = function(e){div_off("submenu");}
/* Disable the Search feature if we are not operating from CGI, since */
/* Search is accomplished using CGI and will not work without it. */
if( !location.origin || !location.origin.match || !location.origin.match(/http/) ){
document.getElementById("search_menubutton").style.display = "none";
}
/* Used by the Hide/Show button beside syntax diagrams, to toggle the */
function hideorshow(btn,obj){
var x = document.getElementById(obj);
var b = document.getElementById(btn);
if( x.style.display!='none' ){
x.style.display = 'none';
b.innerHTML='show';
}else{
x.style.display = '';
b.innerHTML='hide';
}
return false;
}
var antiRobot = 0;
function antiRobotGo(){
if( antiRobot!=3 ) return;
antiRobot = 7;
var j = document.getElementById("mtimelink");
if(j && j.hasAttribute("data-href")) j.href=j.getAttribute("data-href");
}
function antiRobotDefense(){
document.body.onmousedown=function(){
antiRobot |= 2;
antiRobotGo();
document.body.onmousedown=null;
}
document.body.onmousemove=function(){
antiRobot |= 2;
antiRobotGo();
document.body.onmousemove=null;
}
setTimeout(function(){
antiRobot |= 1;
antiRobotGo();
}, 100)
antiRobotGo();
}
antiRobotDefense();
</script>
<!-- keywords: sqlite3_vtab_collation -->

<blockquote><pre>const char *sqlite3_vtab_collation(sqlite3_index_info*,int);
</pre></blockquote>
<p>
This function may only be called from within a call to the <a href="../vtab.html#xbestindex">xBestIndex</a>
method of a <a href="../vtab.html">virtual table</a>.  This function returns a pointer to a string
that is the name of the appropriate collation sequence to use for text
comparisons on the constraint identified by its arguments.</p>

<p>The first argument must be the pointer to the <a href="index_info.htm">sqlite3_index_info</a> object
that is the first parameter to the xBestIndex() method. The second argument
must be an index into the aConstraint[] array belonging to the
sqlite3_index_info structure passed to xBestIndex.</p>

<p>Important:
The first parameter must be the same pointer that is passed into the
xBestMethod() method.  The first parameter may not be a pointer to a
different <a href="index_info.htm">sqlite3_index_info</a> object, even an exact copy.</p>

<p>The return value is computed as follows:</p>

<p></p><ol>
<li><p> If the constraint comes from a WHERE clause expression that contains
a <a href="../lang_expr.html#collateop">COLLATE operator</a>, then the name of the collation specified by
that COLLATE operator is returned.
</p></li><li><p> If there is no COLLATE operator, but the column that is the subject
of the constraint specifies an alternative collating sequence via
a <a href="../lang_createtable.html#collateclause">COLLATE clause</a> on the column definition within the CREATE TABLE
statement that was passed into <a href="declare_vtab.htm">sqlite3_declare_vtab()</a>, then the
name of that alternative collating sequence is returned.
</p></li><li><p> Otherwise, "BINARY" is returned.
</p></li></ol>
<p></p><p>See also lists of
  <a href="objlist.htm">Objects</a>,
  <a href="constlist.htm">Constants</a>, and
  <a href="funclist.htm">Functions</a>.</p>

</body></html>