<!DOCTYPE html><html><head>
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta http-equiv="content-type" content="text/html; charset=UTF-8">

<title>Return The Filename For A Database Connection</title>
<!-- path=../ -->
</head>
<body>

<script>
function toggle_div(nm) {
var w = document.getElementById(nm);
if( w.style.display=="block" ){
w.style.display = "none";
}else{
w.style.display = "block";
}
}
function toggle_search() {
var w = document.getElementById("searchmenu");
if( w.style.display=="block" ){
w.style.display = "none";
} else {
w.style.display = "block";
setTimeout(function(){
document.getElementById("searchbox").focus()
}, 30);
}
}
function div_off(nm){document.getElementById(nm).style.display="none";}
window.onbeforeunload = function(e){div_off("submenu");}
/* Disable the Search feature if we are not operating from CGI, since */
/* Search is accomplished using CGI and will not work without it. */
if( !location.origin || !location.origin.match || !location.origin.match(/http/) ){
document.getElementById("search_menubutton").style.display = "none";
}
/* Used by the Hide/Show button beside syntax diagrams, to toggle the */
function hideorshow(btn,obj){
var x = document.getElementById(obj);
var b = document.getElementById(btn);
if( x.style.display!='none' ){
x.style.display = 'none';
b.innerHTML='show';
}else{
x.style.display = '';
b.innerHTML='hide';
}
return false;
}
var antiRobot = 0;
function antiRobotGo(){
if( antiRobot!=3 ) return;
antiRobot = 7;
var j = document.getElementById("mtimelink");
if(j && j.hasAttribute("data-href")) j.href=j.getAttribute("data-href");
}
function antiRobotDefense(){
document.body.onmousedown=function(){
antiRobot |= 2;
antiRobotGo();
document.body.onmousedown=null;
}
document.body.onmousemove=function(){
antiRobot |= 2;
antiRobotGo();
document.body.onmousemove=null;
}
setTimeout(function(){
antiRobot |= 1;
antiRobotGo();
}, 100)
antiRobotGo();
}
antiRobotDefense();
</script>
<!-- keywords: sqlite3_db_filename -->

<blockquote><pre>sqlite3_filename sqlite3_db_filename(sqlite3 *db, const char *zDbName);
</pre></blockquote>
<p>
The sqlite3_db_filename(D,N) interface returns a pointer to the filename
associated with database N of connection D.
If there is no attached database N on the database
connection D, or if database N is a temporary or in-memory database, then
this function will return either a NULL pointer or an empty string.</p>

<p>The string value returned by this routine is owned and managed by
the database connection.  The value will be valid until the database N
is <a href="../lang_detach.html">DETACH</a>-ed or until the database connection closes.</p>

<p>The filename returned by this function is the output of the
xFullPathname method of the <a href="../vfs.html">VFS</a>.  In other words, the filename
will be an absolute pathname, even if the filename used
to open the database originally was a URI or relative pathname.</p>

<p>If the filename pointer returned by this routine is not NULL, then it
can be used as the filename input parameter to these routines:
</p><ul>
<li> <a href="uri_boolean.htm">sqlite3_uri_parameter()</a>
</li><li> <a href="uri_boolean.htm">sqlite3_uri_boolean()</a>
</li><li> <a href="uri_boolean.htm">sqlite3_uri_int64()</a>
</li><li> <a href="filename_database.htm">sqlite3_filename_database()</a>
</li><li> <a href="filename_database.htm">sqlite3_filename_journal()</a>
</li><li> <a href="filename_database.htm">sqlite3_filename_wal()</a>
</li></ul>
<p></p><p>See also lists of
  <a href="objlist.htm">Objects</a>,
  <a href="constlist.htm">Constants</a>, and
  <a href="funclist.htm">Functions</a>.</p>

</body></html>