<!DOCTYPE html><html><head>
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta http-equiv="content-type" content="text/html; charset=UTF-8">

<title>Report the internal text encoding state of an sqlite3_value object</title>
<!-- path=../ -->
</head>
<body>

<script>
function toggle_div(nm) {
var w = document.getElementById(nm);
if( w.style.display=="block" ){
w.style.display = "none";
}else{
w.style.display = "block";
}
}
function toggle_search() {
var w = document.getElementById("searchmenu");
if( w.style.display=="block" ){
w.style.display = "none";
} else {
w.style.display = "block";
setTimeout(function(){
document.getElementById("searchbox").focus()
}, 30);
}
}
function div_off(nm){document.getElementById(nm).style.display="none";}
window.onbeforeunload = function(e){div_off("submenu");}
/* Disable the Search feature if we are not operating from CGI, since */
/* Search is accomplished using CGI and will not work without it. */
if( !location.origin || !location.origin.match || !location.origin.match(/http/) ){
document.getElementById("search_menubutton").style.display = "none";
}
/* Used by the Hide/Show button beside syntax diagrams, to toggle the */
function hideorshow(btn,obj){
var x = document.getElementById(obj);
var b = document.getElementById(btn);
if( x.style.display!='none' ){
x.style.display = 'none';
b.innerHTML='show';
}else{
x.style.display = '';
b.innerHTML='hide';
}
return false;
}
var antiRobot = 0;
function antiRobotGo(){
if( antiRobot!=3 ) return;
antiRobot = 7;
var j = document.getElementById("mtimelink");
if(j && j.hasAttribute("data-href")) j.href=j.getAttribute("data-href");
}
function antiRobotDefense(){
document.body.onmousedown=function(){
antiRobot |= 2;
antiRobotGo();
document.body.onmousedown=null;
}
document.body.onmousemove=function(){
antiRobot |= 2;
antiRobotGo();
document.body.onmousemove=null;
}
setTimeout(function(){
antiRobot |= 1;
antiRobotGo();
}, 100)
antiRobotGo();
}
antiRobotDefense();
</script>
<!-- keywords: sqlite3_value_encoding -->

<blockquote><pre>int sqlite3_value_encoding(sqlite3_value*);
</pre></blockquote>
<p>
The sqlite3_value_encoding(X) interface returns one of <a href="c_any.htm">SQLITE_UTF8</a>,
<a href="c_any.htm">SQLITE_UTF16BE</a>, or <a href="c_any.htm">SQLITE_UTF16LE</a> according to the current text encoding
of the value X, assuming that X has type TEXT.  If sqlite3_value_type(X)
returns something other than SQLITE_TEXT, then the return value from
sqlite3_value_encoding(X) is meaningless.  Calls to
<a href="value_blob.htm">sqlite3_value_text(X)</a>, <a href="value_blob.htm">sqlite3_value_text16(X)</a>, <a href="value_blob.htm">sqlite3_value_text16be(X)</a>,
<a href="value_blob.htm">sqlite3_value_text16le(X)</a>, <a href="value_blob.htm">sqlite3_value_bytes(X)</a>, or
<a href="value_blob.htm">sqlite3_value_bytes16(X)</a> might change the encoding of the value X and
thus change the return from subsequent calls to sqlite3_value_encoding(X).</p>

<p>This routine is intended for used by applications that test and validate
the SQLite implementation.  This routine is inquiring about the opaque
internal state of an <a href="value.htm">sqlite3_value</a> object.  Ordinary applications should
not need to know what the internal state of an sqlite3_value object is and
hence should not need to use this interface.
</p><p>See also lists of
  <a href="objlist.htm">Objects</a>,
  <a href="constlist.htm">Constants</a>, and
  <a href="funclist.htm">Functions</a>.</p>

</body></html>