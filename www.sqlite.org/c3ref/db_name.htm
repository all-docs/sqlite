<!DOCTYPE html><html><head>
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta http-equiv="content-type" content="text/html; charset=UTF-8">

<title>Return The Schema Name For A Database Connection</title>
<!-- path=../ -->
</head>
<body>

<script>
function toggle_div(nm) {
var w = document.getElementById(nm);
if( w.style.display=="block" ){
w.style.display = "none";
}else{
w.style.display = "block";
}
}
function toggle_search() {
var w = document.getElementById("searchmenu");
if( w.style.display=="block" ){
w.style.display = "none";
} else {
w.style.display = "block";
setTimeout(function(){
document.getElementById("searchbox").focus()
}, 30);
}
}
function div_off(nm){document.getElementById(nm).style.display="none";}
window.onbeforeunload = function(e){div_off("submenu");}
/* Disable the Search feature if we are not operating from CGI, since */
/* Search is accomplished using CGI and will not work without it. */
if( !location.origin || !location.origin.match || !location.origin.match(/http/) ){
document.getElementById("search_menubutton").style.display = "none";
}
/* Used by the Hide/Show button beside syntax diagrams, to toggle the */
function hideorshow(btn,obj){
var x = document.getElementById(obj);
var b = document.getElementById(btn);
if( x.style.display!='none' ){
x.style.display = 'none';
b.innerHTML='show';
}else{
x.style.display = '';
b.innerHTML='hide';
}
return false;
}
var antiRobot = 0;
function antiRobotGo(){
if( antiRobot!=3 ) return;
antiRobot = 7;
var j = document.getElementById("mtimelink");
if(j && j.hasAttribute("data-href")) j.href=j.getAttribute("data-href");
}
function antiRobotDefense(){
document.body.onmousedown=function(){
antiRobot |= 2;
antiRobotGo();
document.body.onmousedown=null;
}
document.body.onmousemove=function(){
antiRobot |= 2;
antiRobotGo();
document.body.onmousemove=null;
}
setTimeout(function(){
antiRobot |= 1;
antiRobotGo();
}, 100)
antiRobotGo();
}
antiRobotDefense();
</script>
<!-- keywords: sqlite3_db_name -->

<blockquote><pre>const char *sqlite3_db_name(sqlite3 *db, int N);
</pre></blockquote>
<p>
The sqlite3_db_name(D,N) interface returns a pointer to the schema name
for the N-th database on database connection D, or a NULL pointer of N is
out of range.  An N value of 0 means the main database file.  An N of 1 is
the "temp" schema.  Larger values of N correspond to various ATTACH-ed
databases.</p>

<p>Space to hold the string that is returned by sqlite3_db_name() is managed
by SQLite itself.  The string might be deallocated by any operation that
changes the schema, including <a href="../lang_attach.html">ATTACH</a> or <a href="../lang_detach.html">DETACH</a> or calls to
<a href="serialize.htm">sqlite3_serialize()</a> or <a href="deserialize.htm">sqlite3_deserialize()</a>, even operations that
occur on a different thread.  Applications that need to
remember the string long-term should make their own copy.  Applications that
are accessing the same database connection simultaneously on multiple
threads should mutex-protect calls to this API and should make their own
private copy of the result prior to releasing the mutex.
</p><p>See also lists of
  <a href="objlist.htm">Objects</a>,
  <a href="constlist.htm">Constants</a>, and
  <a href="funclist.htm">Functions</a>.</p>

</body></html>