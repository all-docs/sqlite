<!DOCTYPE html><html><head>
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta http-equiv="content-type" content="text/html; charset=UTF-8">

<title>Error Logging Interface</title>
<!-- path=../ -->
</head>
<body>

<script>
function toggle_div(nm) {
var w = document.getElementById(nm);
if( w.style.display=="block" ){
w.style.display = "none";
}else{
w.style.display = "block";
}
}
function toggle_search() {
var w = document.getElementById("searchmenu");
if( w.style.display=="block" ){
w.style.display = "none";
} else {
w.style.display = "block";
setTimeout(function(){
document.getElementById("searchbox").focus()
}, 30);
}
}
function div_off(nm){document.getElementById(nm).style.display="none";}
window.onbeforeunload = function(e){div_off("submenu");}
/* Disable the Search feature if we are not operating from CGI, since */
/* Search is accomplished using CGI and will not work without it. */
if( !location.origin || !location.origin.match || !location.origin.match(/http/) ){
document.getElementById("search_menubutton").style.display = "none";
}
/* Used by the Hide/Show button beside syntax diagrams, to toggle the */
function hideorshow(btn,obj){
var x = document.getElementById(obj);
var b = document.getElementById(btn);
if( x.style.display!='none' ){
x.style.display = 'none';
b.innerHTML='show';
}else{
x.style.display = '';
b.innerHTML='hide';
}
return false;
}
var antiRobot = 0;
function antiRobotGo(){
if( antiRobot!=3 ) return;
antiRobot = 7;
var j = document.getElementById("mtimelink");
if(j && j.hasAttribute("data-href")) j.href=j.getAttribute("data-href");
}
function antiRobotDefense(){
document.body.onmousedown=function(){
antiRobot |= 2;
antiRobotGo();
document.body.onmousedown=null;
}
document.body.onmousemove=function(){
antiRobot |= 2;
antiRobotGo();
document.body.onmousemove=null;
}
setTimeout(function(){
antiRobot |= 1;
antiRobotGo();
}, 100)
antiRobotGo();
}
antiRobotDefense();
</script>
<!-- keywords: sqlite3_log -->

<blockquote><pre>void sqlite3_log(int iErrCode, const char *zFormat, ...);
</pre></blockquote>
<p>
The <a href="log.htm">sqlite3_log()</a> interface writes a message into the <a href="../errlog.html">error log</a>
established by the <a href="c_config_covering_index_scan.htm">SQLITE_CONFIG_LOG</a> option to <a href="config.htm">sqlite3_config()</a>.
If logging is enabled, the zFormat string and subsequent arguments are
used with <a href="mprintf.htm">sqlite3_snprintf()</a> to generate the final output string.</p>

<p>The sqlite3_log() interface is intended for use by extensions such as
virtual tables, collating functions, and SQL functions.  While there is
nothing to prevent an application from calling sqlite3_log(), doing so
is considered bad form.</p>

<p>The zFormat string must not be NULL.</p>

<p>To avoid deadlocks and other threading problems, the sqlite3_log() routine
will not use dynamically allocated memory.  The log message is stored in
a fixed-length buffer on the stack.  If the log message is longer than
a few hundred characters, it will be truncated to the length of the
buffer.
</p><p>See also lists of
  <a href="objlist.htm">Objects</a>,
  <a href="constlist.htm">Constants</a>, and
  <a href="funclist.htm">Functions</a>.</p>

</body></html>