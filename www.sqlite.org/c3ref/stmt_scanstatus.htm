<!DOCTYPE html><html><head>
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta http-equiv="content-type" content="text/html; charset=UTF-8">

<title>Prepared Statement Scan Status</title>
<!-- path=../ -->
</head>
<body>

<script>
function toggle_div(nm) {
var w = document.getElementById(nm);
if( w.style.display=="block" ){
w.style.display = "none";
}else{
w.style.display = "block";
}
}
function toggle_search() {
var w = document.getElementById("searchmenu");
if( w.style.display=="block" ){
w.style.display = "none";
} else {
w.style.display = "block";
setTimeout(function(){
document.getElementById("searchbox").focus()
}, 30);
}
}
function div_off(nm){document.getElementById(nm).style.display="none";}
window.onbeforeunload = function(e){div_off("submenu");}
/* Disable the Search feature if we are not operating from CGI, since */
/* Search is accomplished using CGI and will not work without it. */
if( !location.origin || !location.origin.match || !location.origin.match(/http/) ){
document.getElementById("search_menubutton").style.display = "none";
}
/* Used by the Hide/Show button beside syntax diagrams, to toggle the */
function hideorshow(btn,obj){
var x = document.getElementById(obj);
var b = document.getElementById(btn);
if( x.style.display!='none' ){
x.style.display = 'none';
b.innerHTML='show';
}else{
x.style.display = '';
b.innerHTML='hide';
}
return false;
}
var antiRobot = 0;
function antiRobotGo(){
if( antiRobot!=3 ) return;
antiRobot = 7;
var j = document.getElementById("mtimelink");
if(j && j.hasAttribute("data-href")) j.href=j.getAttribute("data-href");
}
function antiRobotDefense(){
document.body.onmousedown=function(){
antiRobot |= 2;
antiRobotGo();
document.body.onmousedown=null;
}
document.body.onmousemove=function(){
antiRobot |= 2;
antiRobotGo();
document.body.onmousemove=null;
}
setTimeout(function(){
antiRobot |= 1;
antiRobotGo();
}, 100)
antiRobotGo();
}
antiRobotDefense();
</script>
<!-- keywords: sqlite3_stmt_scanstatus sqlite3_stmt_scanstatus_v2 -->

<blockquote><pre>int sqlite3_stmt_scanstatus(
  sqlite3_stmt *pStmt,      /* Prepared statement for which info desired */
  int idx,                  /* Index of loop to report on */
  int iScanStatusOp,        /* Information desired.  SQLITE_SCANSTAT_* */
  void *pOut                /* Result written here */
);
int sqlite3_stmt_scanstatus_v2(
  sqlite3_stmt *pStmt,      /* Prepared statement for which info desired */
  int idx,                  /* Index of loop to report on */
  int iScanStatusOp,        /* Information desired.  SQLITE_SCANSTAT_* */
  int flags,                /* Mask of flags defined below */
  void *pOut                /* Result written here */
);
</pre></blockquote>
<p>
These interfaces return information about the predicted and measured
performance for pStmt.  Advanced applications can use this
interface to compare the predicted and the measured performance and
issue warnings and/or rerun <a href="../lang_analyze.html">ANALYZE</a> if discrepancies are found.</p>

<p>Since this interface is expected to be rarely used, it is only
available if SQLite is compiled using the <a href="../compile.html#enable_stmt_scanstatus">SQLITE_ENABLE_STMT_SCANSTATUS</a>
compile-time option.</p>

<p>The "iScanStatusOp" parameter determines which status information to return.
The "iScanStatusOp" must be one of the <a href="c_scanstat_est.htm">scanstatus options</a> or the behavior
of this interface is undefined. The requested measurement is written into
a variable pointed to by the "pOut" parameter.</p>

<p>The "flags" parameter must be passed a mask of flags. At present only
one flag is defined - SQLITE_SCANSTAT_COMPLEX. If SQLITE_SCANSTAT_COMPLEX
is specified, then status information is available for all elements
of a query plan that are reported by "EXPLAIN QUERY PLAN" output. If
SQLITE_SCANSTAT_COMPLEX is not specified, then only query plan elements
that correspond to query loops (the "SCAN..." and "SEARCH..." elements of
the EXPLAIN QUERY PLAN output) are available. Invoking API
sqlite3_stmt_scanstatus() is equivalent to calling
sqlite3_stmt_scanstatus_v2() with a zeroed flags parameter.</p>

<p>Parameter "idx" identifies the specific query element to retrieve statistics
for. Query elements are numbered starting from zero. A value of -1 may be
to query for statistics regarding the entire query. If idx is out of range
- less than -1 or greater than or equal to the total number of query
elements used to implement the statement - a non-zero value is returned and
the variable that pOut points to is unchanged.</p>

<p>See also: <a href="stmt_scanstatus_reset.htm">sqlite3_stmt_scanstatus_reset()</a>
</p><p>See also lists of
  <a href="objlist.htm">Objects</a>,
  <a href="constlist.htm">Constants</a>, and
  <a href="funclist.htm">Functions</a>.</p>

</body></html>