<!DOCTYPE html><html><head>
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta http-equiv="content-type" content="text/html; charset=UTF-8">

<title>Change The EXPLAIN Setting For A Prepared Statement</title>
<!-- path=../ -->
</head>
<body>

<script>
function toggle_div(nm) {
var w = document.getElementById(nm);
if( w.style.display=="block" ){
w.style.display = "none";
}else{
w.style.display = "block";
}
}
function toggle_search() {
var w = document.getElementById("searchmenu");
if( w.style.display=="block" ){
w.style.display = "none";
} else {
w.style.display = "block";
setTimeout(function(){
document.getElementById("searchbox").focus()
}, 30);
}
}
function div_off(nm){document.getElementById(nm).style.display="none";}
window.onbeforeunload = function(e){div_off("submenu");}
/* Disable the Search feature if we are not operating from CGI, since */
/* Search is accomplished using CGI and will not work without it. */
if( !location.origin || !location.origin.match || !location.origin.match(/http/) ){
document.getElementById("search_menubutton").style.display = "none";
}
/* Used by the Hide/Show button beside syntax diagrams, to toggle the */
function hideorshow(btn,obj){
var x = document.getElementById(obj);
var b = document.getElementById(btn);
if( x.style.display!='none' ){
x.style.display = 'none';
b.innerHTML='show';
}else{
x.style.display = '';
b.innerHTML='hide';
}
return false;
}
var antiRobot = 0;
function antiRobotGo(){
if( antiRobot!=3 ) return;
antiRobot = 7;
var j = document.getElementById("mtimelink");
if(j && j.hasAttribute("data-href")) j.href=j.getAttribute("data-href");
}
function antiRobotDefense(){
document.body.onmousedown=function(){
antiRobot |= 2;
antiRobotGo();
document.body.onmousedown=null;
}
document.body.onmousemove=function(){
antiRobot |= 2;
antiRobotGo();
document.body.onmousemove=null;
}
setTimeout(function(){
antiRobot |= 1;
antiRobotGo();
}, 100)
antiRobotGo();
}
antiRobotDefense();
</script>
<!-- keywords: sqlite3_stmt_explain -->

<blockquote><pre>int sqlite3_stmt_explain(sqlite3_stmt *pStmt, int eMode);
</pre></blockquote>
<p>
The sqlite3_stmt_explain(S,E) interface changes the EXPLAIN
setting for <a href="stmt.htm">prepared statement</a> S.  If E is zero, then S becomes
a normal prepared statement.  If E is 1, then S behaves as if
its SQL text began with "<a href="../lang_explain.html">EXPLAIN</a>".  If E is 2, then S behaves as if
its SQL text began with "<a href="../eqp.html">EXPLAIN QUERY PLAN</a>".</p>

<p>Calling sqlite3_stmt_explain(S,E) might cause S to be reprepared.
SQLite tries to avoid a reprepare, but a reprepare might be necessary
on the first transition into EXPLAIN or EXPLAIN QUERY PLAN mode.</p>

<p>Because of the potential need to reprepare, a call to
sqlite3_stmt_explain(S,E) will fail with SQLITE_ERROR if S cannot be
reprepared because it was created using <a href="prepare.htm">sqlite3_prepare()</a> instead of
the newer <a href="prepare.htm">sqlite3_prepare_v2()</a> or <a href="prepare.htm">sqlite3_prepare_v3()</a> interfaces and
hence has no saved SQL text with which to reprepare.</p>

<p>Changing the explain setting for a prepared statement does not change
the original SQL text for the statement.  Hence, if the SQL text originally
began with EXPLAIN or EXPLAIN QUERY PLAN, but sqlite3_stmt_explain(S,0)
is called to convert the statement into an ordinary statement, the EXPLAIN
or EXPLAIN QUERY PLAN keywords will still appear in the sqlite3_sql(S)
output, even though the statement now acts like a normal SQL statement.</p>

<p>This routine returns SQLITE_OK if the explain mode is successfully
changed, or an error code if the explain mode could not be changed.
The explain mode cannot be changed while a statement is active.
Hence, it is good practice to call <a href="reset.htm">sqlite3_reset(S)</a>
immediately prior to calling sqlite3_stmt_explain(S,E).
</p><p>See also lists of
  <a href="objlist.htm">Objects</a>,
  <a href="constlist.htm">Constants</a>, and
  <a href="funclist.htm">Functions</a>.</p>

</body></html>