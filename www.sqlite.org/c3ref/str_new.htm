<!DOCTYPE html><html><head>
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta http-equiv="content-type" content="text/html; charset=UTF-8">

<title>Create A New Dynamic String Object</title>
<!-- path=../ -->
</head>
<body>

<script>
function toggle_div(nm) {
var w = document.getElementById(nm);
if( w.style.display=="block" ){
w.style.display = "none";
}else{
w.style.display = "block";
}
}
function toggle_search() {
var w = document.getElementById("searchmenu");
if( w.style.display=="block" ){
w.style.display = "none";
} else {
w.style.display = "block";
setTimeout(function(){
document.getElementById("searchbox").focus()
}, 30);
}
}
function div_off(nm){document.getElementById(nm).style.display="none";}
window.onbeforeunload = function(e){div_off("submenu");}
/* Disable the Search feature if we are not operating from CGI, since */
/* Search is accomplished using CGI and will not work without it. */
if( !location.origin || !location.origin.match || !location.origin.match(/http/) ){
document.getElementById("search_menubutton").style.display = "none";
}
/* Used by the Hide/Show button beside syntax diagrams, to toggle the */
function hideorshow(btn,obj){
var x = document.getElementById(obj);
var b = document.getElementById(btn);
if( x.style.display!='none' ){
x.style.display = 'none';
b.innerHTML='show';
}else{
x.style.display = '';
b.innerHTML='hide';
}
return false;
}
var antiRobot = 0;
function antiRobotGo(){
if( antiRobot!=3 ) return;
antiRobot = 7;
var j = document.getElementById("mtimelink");
if(j && j.hasAttribute("data-href")) j.href=j.getAttribute("data-href");
}
function antiRobotDefense(){
document.body.onmousedown=function(){
antiRobot |= 2;
antiRobotGo();
document.body.onmousedown=null;
}
document.body.onmousemove=function(){
antiRobot |= 2;
antiRobotGo();
document.body.onmousemove=null;
}
setTimeout(function(){
antiRobot |= 1;
antiRobotGo();
}, 100)
antiRobotGo();
}
antiRobotDefense();
</script>
<!-- keywords: sqlite3_str_new -->

<blockquote><pre>sqlite3_str *sqlite3_str_new(sqlite3*);
</pre></blockquote>
<p>
The <a href="str_new.htm">sqlite3_str_new(D)</a> interface allocates and initializes
a new <a href="str.htm">sqlite3_str</a> object.  To avoid memory leaks, the object returned by
<a href="str_new.htm">sqlite3_str_new()</a> must be freed by a subsequent call to
<a href="str_finish.htm">sqlite3_str_finish(X)</a>.</p>

<p>The <a href="str_new.htm">sqlite3_str_new(D)</a> interface always returns a pointer to a
valid <a href="str.htm">sqlite3_str</a> object, though in the event of an out-of-memory
error the returned object might be a special singleton that will
silently reject new text, always return SQLITE_NOMEM from
<a href="str_errcode.htm">sqlite3_str_errcode()</a>, always return 0 for
<a href="str_errcode.htm">sqlite3_str_length()</a>, and always return NULL from
<a href="str_finish.htm">sqlite3_str_finish(X)</a>.  It is always safe to use the value
returned by <a href="str_new.htm">sqlite3_str_new(D)</a> as the sqlite3_str parameter
to any of the other <a href="str.htm">sqlite3_str</a> methods.</p>

<p>The D parameter to <a href="str_new.htm">sqlite3_str_new(D)</a> may be NULL.  If the
D parameter in <a href="str_new.htm">sqlite3_str_new(D)</a> is not NULL, then the maximum
length of the string contained in the <a href="str.htm">sqlite3_str</a> object will be
the value set for <a href="limit.htm">sqlite3_limit</a>(D,<a href="c_limit_attached.htm">SQLITE_LIMIT_LENGTH</a>) instead
of <a href="../limits.html#max_length">SQLITE_MAX_LENGTH</a>.
</p><p>See also lists of
  <a href="objlist.htm">Objects</a>,
  <a href="constlist.htm">Constants</a>, and
  <a href="funclist.htm">Functions</a>.</p>

</body></html>