<!DOCTYPE html><html><head>
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta http-equiv="content-type" content="text/html; charset=UTF-8">

<title>Write-Ahead Log Commit Hook</title>
<!-- path=../ -->
</head>
<body>

<script>
function toggle_div(nm) {
var w = document.getElementById(nm);
if( w.style.display=="block" ){
w.style.display = "none";
}else{
w.style.display = "block";
}
}
function toggle_search() {
var w = document.getElementById("searchmenu");
if( w.style.display=="block" ){
w.style.display = "none";
} else {
w.style.display = "block";
setTimeout(function(){
document.getElementById("searchbox").focus()
}, 30);
}
}
function div_off(nm){document.getElementById(nm).style.display="none";}
window.onbeforeunload = function(e){div_off("submenu");}
/* Disable the Search feature if we are not operating from CGI, since */
/* Search is accomplished using CGI and will not work without it. */
if( !location.origin || !location.origin.match || !location.origin.match(/http/) ){
document.getElementById("search_menubutton").style.display = "none";
}
/* Used by the Hide/Show button beside syntax diagrams, to toggle the */
function hideorshow(btn,obj){
var x = document.getElementById(obj);
var b = document.getElementById(btn);
if( x.style.display!='none' ){
x.style.display = 'none';
b.innerHTML='show';
}else{
x.style.display = '';
b.innerHTML='hide';
}
return false;
}
var antiRobot = 0;
function antiRobotGo(){
if( antiRobot!=3 ) return;
antiRobot = 7;
var j = document.getElementById("mtimelink");
if(j && j.hasAttribute("data-href")) j.href=j.getAttribute("data-href");
}
function antiRobotDefense(){
document.body.onmousedown=function(){
antiRobot |= 2;
antiRobotGo();
document.body.onmousedown=null;
}
document.body.onmousemove=function(){
antiRobot |= 2;
antiRobotGo();
document.body.onmousemove=null;
}
setTimeout(function(){
antiRobot |= 1;
antiRobotGo();
}, 100)
antiRobotGo();
}
antiRobotDefense();
</script>
<!-- keywords: sqlite3_wal_hook -->

<blockquote><pre>void *sqlite3_wal_hook(
  sqlite3*,
  int(*)(void *,sqlite3*,const char*,int),
  void*
);
</pre></blockquote>
<p>
The <a href="wal_hook.htm">sqlite3_wal_hook()</a> function is used to register a callback that
is invoked each time data is committed to a database in wal mode.</p>

<p>The callback is invoked by SQLite after the commit has taken place and
the associated write-lock on the database released, so the implementation
may read, write or <a href="../wal.html#ckpt">checkpoint</a> the database as required.</p>

<p>The first parameter passed to the callback function when it is invoked
is a copy of the third parameter passed to sqlite3_wal_hook() when
registering the callback. The second is a copy of the database handle.
The third parameter is the name of the database that was written to -
either "main" or the name of an <a href="../lang_attach.html">ATTACH</a>-ed database. The fourth parameter
is the number of pages currently in the write-ahead log file,
including those that were just committed.</p>

<p>The callback function should normally return <a href="../rescode.html#ok">SQLITE_OK</a>.  If an error
code is returned, that error will propagate back up through the
SQLite code base to cause the statement that provoked the callback
to report an error, though the commit will have still occurred. If the
callback returns <a href="../rescode.html#row">SQLITE_ROW</a> or <a href="../rescode.html#done">SQLITE_DONE</a>, or if it returns a value
that does not correspond to any valid SQLite error code, the results
are undefined.</p>

<p>A single database handle may have at most a single write-ahead log callback
registered at one time. Calling <a href="wal_hook.htm">sqlite3_wal_hook()</a> replaces any
previously registered write-ahead log callback. The return value is
a copy of the third parameter from the previous call, if any, or 0.
Note that the <a href="wal_autocheckpoint.htm">sqlite3_wal_autocheckpoint()</a> interface and the
<a href="../pragma.html#pragma_wal_autocheckpoint">wal_autocheckpoint pragma</a> both invoke <a href="wal_hook.htm">sqlite3_wal_hook()</a> and will
overwrite any prior <a href="wal_hook.htm">sqlite3_wal_hook()</a> settings.
</p><p>See also lists of
  <a href="objlist.htm">Objects</a>,
  <a href="constlist.htm">Constants</a>, and
  <a href="funclist.htm">Functions</a>.</p>

</body></html>