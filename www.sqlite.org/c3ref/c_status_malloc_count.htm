<!DOCTYPE html><html><head>
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta http-equiv="content-type" content="text/html; charset=UTF-8">

<title>Status Parameters</title>
<!-- path=../ -->
</head>
<body>

<script>
function toggle_div(nm) {
var w = document.getElementById(nm);
if( w.style.display=="block" ){
w.style.display = "none";
}else{
w.style.display = "block";
}
}
function toggle_search() {
var w = document.getElementById("searchmenu");
if( w.style.display=="block" ){
w.style.display = "none";
} else {
w.style.display = "block";
setTimeout(function(){
document.getElementById("searchbox").focus()
}, 30);
}
}
function div_off(nm){document.getElementById(nm).style.display="none";}
window.onbeforeunload = function(e){div_off("submenu");}
/* Disable the Search feature if we are not operating from CGI, since */
/* Search is accomplished using CGI and will not work without it. */
if( !location.origin || !location.origin.match || !location.origin.match(/http/) ){
document.getElementById("search_menubutton").style.display = "none";
}
/* Used by the Hide/Show button beside syntax diagrams, to toggle the */
function hideorshow(btn,obj){
var x = document.getElementById(obj);
var b = document.getElementById(btn);
if( x.style.display!='none' ){
x.style.display = 'none';
b.innerHTML='show';
}else{
x.style.display = '';
b.innerHTML='hide';
}
return false;
}
var antiRobot = 0;
function antiRobotGo(){
if( antiRobot!=3 ) return;
antiRobot = 7;
var j = document.getElementById("mtimelink");
if(j && j.hasAttribute("data-href")) j.href=j.getAttribute("data-href");
}
function antiRobotDefense(){
document.body.onmousedown=function(){
antiRobot |= 2;
antiRobotGo();
document.body.onmousedown=null;
}
document.body.onmousemove=function(){
antiRobot |= 2;
antiRobotGo();
document.body.onmousemove=null;
}
setTimeout(function(){
antiRobot |= 1;
antiRobotGo();
}, 100)
antiRobotGo();
}
antiRobotDefense();
</script>
<!-- keywords: SQLITE_STATUS_MALLOC_COUNT SQLITE_STATUS_MALLOC_SIZE SQLITE_STATUS_MEMORY_USED SQLITE_STATUS_PAGECACHE_OVERFLOW SQLITE_STATUS_PAGECACHE_SIZE SQLITE_STATUS_PAGECACHE_USED SQLITE_STATUS_PARSER_STACK SQLITE_STATUS_SCRATCH_OVERFLOW SQLITE_STATUS_SCRATCH_SIZE SQLITE_STATUS_SCRATCH_USED {status parameters} -->

<blockquote><pre>#define SQLITE_STATUS_MEMORY_USED          0
#define SQLITE_STATUS_PAGECACHE_USED       1
#define SQLITE_STATUS_PAGECACHE_OVERFLOW   2
#define SQLITE_STATUS_SCRATCH_USED         3  /* NOT USED */
#define SQLITE_STATUS_SCRATCH_OVERFLOW     4  /* NOT USED */
#define SQLITE_STATUS_MALLOC_SIZE          5
#define SQLITE_STATUS_PARSER_STACK         6
#define SQLITE_STATUS_PAGECACHE_SIZE       7
#define SQLITE_STATUS_SCRATCH_SIZE         8  /* NOT USED */
#define SQLITE_STATUS_MALLOC_COUNT         9
</pre></blockquote>
<p>
These integer constants designate various run-time status parameters
that can be returned by <a href="status.htm">sqlite3_status()</a>.</p>

<p></p><dl>
<a name="sqlitestatusmemoryused"></a>
 <dt>SQLITE_STATUS_MEMORY_USED</dt>
<dd>This parameter is the current amount of memory checked out
using <a href="free.htm">sqlite3_malloc()</a>, either directly or indirectly.  The
figure includes calls made to <a href="free.htm">sqlite3_malloc()</a> by the application
and internal memory usage by the SQLite library.  Auxiliary page-cache
memory controlled by <a href="c_config_covering_index_scan.htm">SQLITE_CONFIG_PAGECACHE</a> is not included in
this parameter.  The amount returned is the sum of the allocation
sizes as reported by the xSize method in <a href="mem_methods.htm">sqlite3_mem_methods</a>.</dd><p></p>

<p><a name="sqlitestatusmallocsize"></a>
 </p><dt>SQLITE_STATUS_MALLOC_SIZE</dt>
<dd>This parameter records the largest memory allocation request
handed to <a href="free.htm">sqlite3_malloc()</a> or <a href="free.htm">sqlite3_realloc()</a> (or their
internal equivalents).  Only the value returned in the
*pHighwater parameter to <a href="status.htm">sqlite3_status()</a> is of interest.
The value written into the *pCurrent parameter is undefined.</dd><p></p>

<p><a name="sqlitestatusmalloccount"></a>
 </p><dt>SQLITE_STATUS_MALLOC_COUNT</dt>
<dd>This parameter records the number of separate memory allocations
currently checked out.</dd><p></p>

<p><a name="sqlitestatuspagecacheused"></a>
 </p><dt>SQLITE_STATUS_PAGECACHE_USED</dt>
<dd>This parameter returns the number of pages used out of the
<a href="../malloc.html#pagecache">pagecache memory allocator</a> that was configured using
<a href="c_config_covering_index_scan.htm">SQLITE_CONFIG_PAGECACHE</a>.  The
value returned is in pages, not in bytes.</dd><p></p>

<p><a name="sqlitestatuspagecacheoverflow"></a>

</p><dt>SQLITE_STATUS_PAGECACHE_OVERFLOW</dt>
<dd>This parameter returns the number of bytes of page cache
allocation which could not be satisfied by the <a href="c_config_covering_index_scan.htm">SQLITE_CONFIG_PAGECACHE</a>
buffer and where forced to overflow to <a href="free.htm">sqlite3_malloc()</a>.  The
returned value includes allocations that overflowed because they
where too large (they were larger than the "sz" parameter to
<a href="c_config_covering_index_scan.htm">SQLITE_CONFIG_PAGECACHE</a>) and allocations that overflowed because
no space was left in the page cache.</dd><p></p>

<p><a name="sqlitestatuspagecachesize"></a>
 </p><dt>SQLITE_STATUS_PAGECACHE_SIZE</dt>
<dd>This parameter records the largest memory allocation request
handed to the <a href="../malloc.html#pagecache">pagecache memory allocator</a>.  Only the value returned in the
*pHighwater parameter to <a href="status.htm">sqlite3_status()</a> is of interest.
The value written into the *pCurrent parameter is undefined.</dd><p></p>

<p><a name="sqlitestatusscratchused"></a>
 </p><dt>SQLITE_STATUS_SCRATCH_USED</dt>
<dd>No longer used.</dd><p></p>

<p><a name="sqlitestatusscratchoverflow"></a>
 </p><dt>SQLITE_STATUS_SCRATCH_OVERFLOW</dt>
<dd>No longer used.</dd><p></p>

<p><a name="sqlitestatusscratchsize"></a>
 </p><dt>SQLITE_STATUS_SCRATCH_SIZE</dt>
<dd>No longer used.</dd><p></p>

<p><a name="sqlitestatusparserstack"></a>
 </p><dt>SQLITE_STATUS_PARSER_STACK</dt>
<dd>The *pHighwater parameter records the deepest parser stack.
The *pCurrent value is undefined.  The *pHighwater value is only
meaningful if SQLite is compiled with <a href="../compile.html#yytrackmaxstackdepth">YYTRACKMAXSTACKDEPTH</a>.</dd>
</dl><p></p>

<p>New status parameters may be added from time to time.
</p><p>See also lists of
  <a href="objlist.htm">Objects</a>,
  <a href="constlist.htm">Constants</a>, and
  <a href="funclist.htm">Functions</a>.</p>

</body></html>