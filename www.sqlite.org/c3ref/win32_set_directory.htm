<!DOCTYPE html><html><head>
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta http-equiv="content-type" content="text/html; charset=UTF-8">

<title>Win32 Specific Interface</title>
<!-- path=../ -->
</head>
<body>

<script>
function toggle_div(nm) {
var w = document.getElementById(nm);
if( w.style.display=="block" ){
w.style.display = "none";
}else{
w.style.display = "block";
}
}
function toggle_search() {
var w = document.getElementById("searchmenu");
if( w.style.display=="block" ){
w.style.display = "none";
} else {
w.style.display = "block";
setTimeout(function(){
document.getElementById("searchbox").focus()
}, 30);
}
}
function div_off(nm){document.getElementById(nm).style.display="none";}
window.onbeforeunload = function(e){div_off("submenu");}
/* Disable the Search feature if we are not operating from CGI, since */
/* Search is accomplished using CGI and will not work without it. */
if( !location.origin || !location.origin.match || !location.origin.match(/http/) ){
document.getElementById("search_menubutton").style.display = "none";
}
/* Used by the Hide/Show button beside syntax diagrams, to toggle the */
function hideorshow(btn,obj){
var x = document.getElementById(obj);
var b = document.getElementById(btn);
if( x.style.display!='none' ){
x.style.display = 'none';
b.innerHTML='show';
}else{
x.style.display = '';
b.innerHTML='hide';
}
return false;
}
var antiRobot = 0;
function antiRobotGo(){
if( antiRobot!=3 ) return;
antiRobot = 7;
var j = document.getElementById("mtimelink");
if(j && j.hasAttribute("data-href")) j.href=j.getAttribute("data-href");
}
function antiRobotDefense(){
document.body.onmousedown=function(){
antiRobot |= 2;
antiRobotGo();
document.body.onmousedown=null;
}
document.body.onmousemove=function(){
antiRobot |= 2;
antiRobotGo();
document.body.onmousemove=null;
}
setTimeout(function(){
antiRobot |= 1;
antiRobotGo();
}, 100)
antiRobotGo();
}
antiRobotDefense();
</script>
<!-- keywords: sqlite3_win32_set_directory sqlite3_win32_set_directory16 sqlite3_win32_set_directory8 -->

<blockquote><pre>int sqlite3_win32_set_directory(
  unsigned long type, /* Identifier for directory being set or reset */
  void *zValue        /* New value for directory being set or reset */
);
int sqlite3_win32_set_directory8(unsigned long type, const char *zValue);
int sqlite3_win32_set_directory16(unsigned long type, const void *zValue);
</pre></blockquote>
<p>
These interfaces are available only on Windows.  The
<a href="win32_set_directory.htm">sqlite3_win32_set_directory</a> interface is used to set the value associated
with the <a href="temp_directory.htm">sqlite3_temp_directory</a> or <a href="data_directory.htm">sqlite3_data_directory</a> variable, to
zValue, depending on the value of the type parameter.  The zValue parameter
should be NULL to cause the previous value to be freed via <a href="free.htm">sqlite3_free</a>;
a non-NULL value will be copied into memory obtained from <a href="free.htm">sqlite3_malloc</a>
prior to being used.  The <a href="win32_set_directory.htm">sqlite3_win32_set_directory</a> interface returns
<a href="../rescode.html#ok">SQLITE_OK</a> to indicate success, <a href="../rescode.html#error">SQLITE_ERROR</a> if the type is unsupported,
or <a href="../rescode.html#nomem">SQLITE_NOMEM</a> if memory could not be allocated.  The value of the
<a href="data_directory.htm">sqlite3_data_directory</a> variable is intended to act as a replacement for
the current directory on the sub-platforms of Win32 where that concept is
not present, e.g. WinRT and UWP.  The <a href="win32_set_directory.htm">sqlite3_win32_set_directory8</a> and
<a href="win32_set_directory.htm">sqlite3_win32_set_directory16</a> interfaces behave exactly the same as the
sqlite3_win32_set_directory interface except the string parameter must be
UTF-8 or UTF-16, respectively.
</p><p>See also lists of
  <a href="objlist.htm">Objects</a>,
  <a href="constlist.htm">Constants</a>, and
  <a href="funclist.htm">Functions</a>.</p>

</body></html>