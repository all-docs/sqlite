<!DOCTYPE html><html><head>
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta http-equiv="content-type" content="text/html; charset=UTF-8">

<title>Read Data From A BLOB Incrementally</title>
<!-- path=../ -->
</head>
<body>

<script>
function toggle_div(nm) {
var w = document.getElementById(nm);
if( w.style.display=="block" ){
w.style.display = "none";
}else{
w.style.display = "block";
}
}
function toggle_search() {
var w = document.getElementById("searchmenu");
if( w.style.display=="block" ){
w.style.display = "none";
} else {
w.style.display = "block";
setTimeout(function(){
document.getElementById("searchbox").focus()
}, 30);
}
}
function div_off(nm){document.getElementById(nm).style.display="none";}
window.onbeforeunload = function(e){div_off("submenu");}
/* Disable the Search feature if we are not operating from CGI, since */
/* Search is accomplished using CGI and will not work without it. */
if( !location.origin || !location.origin.match || !location.origin.match(/http/) ){
document.getElementById("search_menubutton").style.display = "none";
}
/* Used by the Hide/Show button beside syntax diagrams, to toggle the */
function hideorshow(btn,obj){
var x = document.getElementById(obj);
var b = document.getElementById(btn);
if( x.style.display!='none' ){
x.style.display = 'none';
b.innerHTML='show';
}else{
x.style.display = '';
b.innerHTML='hide';
}
return false;
}
var antiRobot = 0;
function antiRobotGo(){
if( antiRobot!=3 ) return;
antiRobot = 7;
var j = document.getElementById("mtimelink");
if(j && j.hasAttribute("data-href")) j.href=j.getAttribute("data-href");
}
function antiRobotDefense(){
document.body.onmousedown=function(){
antiRobot |= 2;
antiRobotGo();
document.body.onmousedown=null;
}
document.body.onmousemove=function(){
antiRobot |= 2;
antiRobotGo();
document.body.onmousemove=null;
}
setTimeout(function(){
antiRobot |= 1;
antiRobotGo();
}, 100)
antiRobotGo();
}
antiRobotDefense();
</script>
<!-- keywords: sqlite3_blob_read -->

<blockquote><pre>int sqlite3_blob_read(sqlite3_blob *, void *Z, int N, int iOffset);
</pre></blockquote>
<p>
This function is used to read data from an open <a href="blob.htm">BLOB handle</a> into a
caller-supplied buffer. N bytes of data are copied into buffer Z
from the open BLOB, starting at offset iOffset.</p>

<p>If offset iOffset is less than N bytes from the end of the BLOB,
<a href="../rescode.html#error">SQLITE_ERROR</a> is returned and no data is read.  If N or iOffset is
less than zero, <a href="../rescode.html#error">SQLITE_ERROR</a> is returned and no data is read.
The size of the blob (and hence the maximum value of N+iOffset)
can be determined using the <a href="blob_bytes.htm">sqlite3_blob_bytes()</a> interface.</p>

<p>An attempt to read from an expired <a href="blob.htm">BLOB handle</a> fails with an
error code of <a href="../rescode.html#abort">SQLITE_ABORT</a>.</p>

<p>On success, sqlite3_blob_read() returns SQLITE_OK.
Otherwise, an <a href="../rescode.html">error code</a> or an <a href="../rescode.html#extrc">extended error code</a> is returned.</p>

<p>This routine only works on a <a href="blob.htm">BLOB handle</a> which has been created
by a prior successful call to <a href="blob_open.htm">sqlite3_blob_open()</a> and which has not
been closed by <a href="blob_close.htm">sqlite3_blob_close()</a>.  Passing any other pointer in
to this routine results in undefined and probably undesirable behavior.</p>

<p>See also: <a href="blob_write.htm">sqlite3_blob_write()</a>.
</p><p>See also lists of
  <a href="objlist.htm">Objects</a>,
  <a href="constlist.htm">Constants</a>, and
  <a href="funclist.htm">Functions</a>.</p>

</body></html>