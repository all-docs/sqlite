<!DOCTYPE html><html><head>
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta http-equiv="content-type" content="text/html; charset=UTF-8">

<title>Prepare Flags</title>
<!-- path=../ -->
</head>
<body>

<script>
function toggle_div(nm) {
var w = document.getElementById(nm);
if( w.style.display=="block" ){
w.style.display = "none";
}else{
w.style.display = "block";
}
}
function toggle_search() {
var w = document.getElementById("searchmenu");
if( w.style.display=="block" ){
w.style.display = "none";
} else {
w.style.display = "block";
setTimeout(function(){
document.getElementById("searchbox").focus()
}, 30);
}
}
function div_off(nm){document.getElementById(nm).style.display="none";}
window.onbeforeunload = function(e){div_off("submenu");}
/* Disable the Search feature if we are not operating from CGI, since */
/* Search is accomplished using CGI and will not work without it. */
if( !location.origin || !location.origin.match || !location.origin.match(/http/) ){
document.getElementById("search_menubutton").style.display = "none";
}
/* Used by the Hide/Show button beside syntax diagrams, to toggle the */
function hideorshow(btn,obj){
var x = document.getElementById(obj);
var b = document.getElementById(btn);
if( x.style.display!='none' ){
x.style.display = 'none';
b.innerHTML='show';
}else{
x.style.display = '';
b.innerHTML='hide';
}
return false;
}
var antiRobot = 0;
function antiRobotGo(){
if( antiRobot!=3 ) return;
antiRobot = 7;
var j = document.getElementById("mtimelink");
if(j && j.hasAttribute("data-href")) j.href=j.getAttribute("data-href");
}
function antiRobotDefense(){
document.body.onmousedown=function(){
antiRobot |= 2;
antiRobotGo();
document.body.onmousedown=null;
}
document.body.onmousemove=function(){
antiRobot |= 2;
antiRobotGo();
document.body.onmousemove=null;
}
setTimeout(function(){
antiRobot |= 1;
antiRobotGo();
}, 100)
antiRobotGo();
}
antiRobotDefense();
</script>
<!-- keywords: SQLITE_PREPARE_DONT_LOG SQLITE_PREPARE_NORMALIZE SQLITE_PREPARE_NO_VTAB SQLITE_PREPARE_PERSISTENT -->

<blockquote><pre>#define SQLITE_PREPARE_PERSISTENT              0x01
#define SQLITE_PREPARE_NORMALIZE               0x02
#define SQLITE_PREPARE_NO_VTAB                 0x04
#define SQLITE_PREPARE_DONT_LOG                0x10
</pre></blockquote>
<p>
These constants define various flags that can be passed into
"prepFlags" parameter of the <a href="prepare.htm">sqlite3_prepare_v3()</a> and
<a href="prepare.htm">sqlite3_prepare16_v3()</a> interfaces.</p>

<p>New flags may be added in future releases of SQLite.</p>

<p></p><dl>
<a name="sqlitepreparepersistent"></a>
 <dt>SQLITE_PREPARE_PERSISTENT</dt>
<dd>The SQLITE_PREPARE_PERSISTENT flag is a hint to the query planner
that the prepared statement will be retained for a long time and
probably reused many times. Without this flag, <a href="prepare.htm">sqlite3_prepare_v3()</a>
and <a href="prepare.htm">sqlite3_prepare16_v3()</a> assume that the prepared statement will
be used just once or at most a few times and then destroyed using
<a href="finalize.htm">sqlite3_finalize()</a> relatively soon. The current implementation acts
on this hint by avoiding the use of <a href="../malloc.html#lookaside">lookaside memory</a> so as not to
deplete the limited store of lookaside memory. Future versions of
SQLite may act on this hint differently.<p></p>

<p><a name="sqlitepreparenormalize"></a>
 </p></dd><dt>SQLITE_PREPARE_NORMALIZE</dt>
<dd>The SQLITE_PREPARE_NORMALIZE flag is a no-op. This flag used
to be required for any prepared statement that wanted to use the
<a href="expanded_sql.htm">sqlite3_normalized_sql()</a> interface.  However, the
<a href="expanded_sql.htm">sqlite3_normalized_sql()</a> interface is now available to all
prepared statements, regardless of whether or not they use this
flag.<p></p>

<p><a name="sqlitepreparenovtab"></a>
 </p></dd><dt>SQLITE_PREPARE_NO_VTAB</dt>
<dd>The SQLITE_PREPARE_NO_VTAB flag causes the SQL compiler
to return an error (error code SQLITE_ERROR) if the statement uses
any virtual tables.<p></p>

<p><a name="sqlitepreparedontlog"></a>
 </p></dd><dt>SQLITE_PREPARE_DONT_LOG</dt>
<dd>The SQLITE_PREPARE_DONT_LOG flag prevents SQL compiler
errors from being sent to the error log defined by
<a href="c_config_covering_index_scan.htm">SQLITE_CONFIG_LOG</a>.  This can be used, for example, to do test
compiles to see if some SQL syntax is well-formed, without generating
messages on the global error log when it is not.  If the test compile
fails, the sqlite3_prepare_v3() call returns the same error indications
with or without this flag; it just omits the call to <a href="log.htm">sqlite3_log()</a> that
logs the error.
</dd></dl>
<p></p><p>See also lists of
  <a href="objlist.htm">Objects</a>,
  <a href="constlist.htm">Constants</a>, and
  <a href="funclist.htm">Functions</a>.</p>

</body></html>