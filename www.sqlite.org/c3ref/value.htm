<!DOCTYPE html><html><head>
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta http-equiv="content-type" content="text/html; charset=UTF-8">

<title>Dynamically Typed Value Object</title>
<!-- path=../ -->
</head>
<body>

<script>
function toggle_div(nm) {
var w = document.getElementById(nm);
if( w.style.display=="block" ){
w.style.display = "none";
}else{
w.style.display = "block";
}
}
function toggle_search() {
var w = document.getElementById("searchmenu");
if( w.style.display=="block" ){
w.style.display = "none";
} else {
w.style.display = "block";
setTimeout(function(){
document.getElementById("searchbox").focus()
}, 30);
}
}
function div_off(nm){document.getElementById(nm).style.display="none";}
window.onbeforeunload = function(e){div_off("submenu");}
/* Disable the Search feature if we are not operating from CGI, since */
/* Search is accomplished using CGI and will not work without it. */
if( !location.origin || !location.origin.match || !location.origin.match(/http/) ){
document.getElementById("search_menubutton").style.display = "none";
}
/* Used by the Hide/Show button beside syntax diagrams, to toggle the */
function hideorshow(btn,obj){
var x = document.getElementById(obj);
var b = document.getElementById(btn);
if( x.style.display!='none' ){
x.style.display = 'none';
b.innerHTML='show';
}else{
x.style.display = '';
b.innerHTML='hide';
}
return false;
}
var antiRobot = 0;
function antiRobotGo(){
if( antiRobot!=3 ) return;
antiRobot = 7;
var j = document.getElementById("mtimelink");
if(j && j.hasAttribute("data-href")) j.href=j.getAttribute("data-href");
}
function antiRobotDefense(){
document.body.onmousedown=function(){
antiRobot |= 2;
antiRobotGo();
document.body.onmousedown=null;
}
document.body.onmousemove=function(){
antiRobot |= 2;
antiRobotGo();
document.body.onmousemove=null;
}
setTimeout(function(){
antiRobot |= 1;
antiRobotGo();
}, 100)
antiRobotGo();
}
antiRobotDefense();
</script>
<!-- keywords: {protected sqlite3_value} sqlite3_value {unprotected sqlite3_value} -->

<blockquote><pre>typedef struct sqlite3_value sqlite3_value;
</pre></blockquote>
<p>
SQLite uses the sqlite3_value object to represent all values
that can be stored in a database table. SQLite uses dynamic typing
for the values it stores.  Values stored in sqlite3_value objects
can be integers, floating point values, strings, BLOBs, or NULL.</p>

<p>An sqlite3_value object may be either "protected" or "unprotected".
Some interfaces require a protected sqlite3_value.  Other interfaces
will accept either a protected or an unprotected sqlite3_value.
Every interface that accepts sqlite3_value arguments specifies
whether or not it requires a protected sqlite3_value.  The
<a href="value_dup.htm">sqlite3_value_dup()</a> interface can be used to construct a new
protected sqlite3_value from an unprotected sqlite3_value.</p>

<p>The terms "protected" and "unprotected" refer to whether or not
a mutex is held.  An internal mutex is held for a protected
sqlite3_value object but no mutex is held for an unprotected
sqlite3_value object.  If SQLite is compiled to be single-threaded
(with <a href="../compile.html#threadsafe">SQLITE_THREADSAFE=0</a> and with <a href="threadsafe.htm">sqlite3_threadsafe()</a> returning 0)
or if SQLite is run in one of reduced mutex modes
<a href="c_config_covering_index_scan.htm">SQLITE_CONFIG_SINGLETHREAD</a> or <a href="c_config_covering_index_scan.htm">SQLITE_CONFIG_MULTITHREAD</a>
then there is no distinction between protected and unprotected
sqlite3_value objects and they can be used interchangeably.  However,
for maximum code portability it is recommended that applications
still make the distinction between protected and unprotected
sqlite3_value objects even when not strictly required.</p>

<p>The sqlite3_value objects that are passed as parameters into the
implementation of <a href="../appfunc.html">application-defined SQL functions</a> are protected.
The sqlite3_value objects returned by <a href="vtab_rhs_value.htm">sqlite3_vtab_rhs_value()</a>
are protected.
The sqlite3_value object returned by
<a href="column_blob.htm">sqlite3_column_value()</a> is unprotected.
Unprotected sqlite3_value objects may only be used as arguments
to <a href="result_blob.htm">sqlite3_result_value()</a>, <a href="bind_blob.htm">sqlite3_bind_value()</a>, and
<a href="value_dup.htm">sqlite3_value_dup()</a>.
The <a href="value_blob.htm">sqlite3_value_type()</a> family of
interfaces require protected sqlite3_value objects.
</p><p>19 Methods using this object:
</p><div class="columns" style="columns: 17em auto;">
<ul style="padding-top:0;">
<li><a href="value_blob.htm">sqlite3_value_blob</a></li>
<li><a href="value_blob.htm">sqlite3_value_bytes</a></li>
<li><a href="value_blob.htm">sqlite3_value_bytes16</a></li>
<li><a href="value_blob.htm">sqlite3_value_double</a></li>
<li><a href="value_dup.htm">sqlite3_value_dup</a></li>
<li><a href="value_encoding.htm">sqlite3_value_encoding</a></li>
<li><a href="value_dup.htm">sqlite3_value_free</a></li>
<li><a href="value_blob.htm">sqlite3_value_frombind</a></li>
<li><a href="value_blob.htm">sqlite3_value_int</a></li>
<li><a href="value_blob.htm">sqlite3_value_int64</a></li>
<li><a href="value_blob.htm">sqlite3_value_nochange</a></li>
<li><a href="value_blob.htm">sqlite3_value_numeric_type</a></li>
<li><a href="value_blob.htm">sqlite3_value_pointer</a></li>
<li><a href="value_subtype.htm">sqlite3_value_subtype</a></li>
<li><a href="value_blob.htm">sqlite3_value_text</a></li>
<li><a href="value_blob.htm">sqlite3_value_text16</a></li>
<li><a href="value_blob.htm">sqlite3_value_text16be</a></li>
<li><a href="value_blob.htm">sqlite3_value_text16le</a></li>
<li><a href="value_blob.htm">sqlite3_value_type</a></li>
</ul>
</div>
<p></p>
<p>See also lists of
  <a href="objlist.htm">Objects</a>,
  <a href="constlist.htm">Constants</a>, and
  <a href="funclist.htm">Functions</a>.</p>

</body></html>