<!DOCTYPE html><html><head>
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta http-equiv="content-type" content="text/html; charset=UTF-8">

<title>Record A Database Snapshot</title>
<!-- path=../ -->
</head>
<body>

<script>
function toggle_div(nm) {
var w = document.getElementById(nm);
if( w.style.display=="block" ){
w.style.display = "none";
}else{
w.style.display = "block";
}
}
function toggle_search() {
var w = document.getElementById("searchmenu");
if( w.style.display=="block" ){
w.style.display = "none";
} else {
w.style.display = "block";
setTimeout(function(){
document.getElementById("searchbox").focus()
}, 30);
}
}
function div_off(nm){document.getElementById(nm).style.display="none";}
window.onbeforeunload = function(e){div_off("submenu");}
/* Disable the Search feature if we are not operating from CGI, since */
/* Search is accomplished using CGI and will not work without it. */
if( !location.origin || !location.origin.match || !location.origin.match(/http/) ){
document.getElementById("search_menubutton").style.display = "none";
}
/* Used by the Hide/Show button beside syntax diagrams, to toggle the */
function hideorshow(btn,obj){
var x = document.getElementById(obj);
var b = document.getElementById(btn);
if( x.style.display!='none' ){
x.style.display = 'none';
b.innerHTML='show';
}else{
x.style.display = '';
b.innerHTML='hide';
}
return false;
}
var antiRobot = 0;
function antiRobotGo(){
if( antiRobot!=3 ) return;
antiRobot = 7;
var j = document.getElementById("mtimelink");
if(j && j.hasAttribute("data-href")) j.href=j.getAttribute("data-href");
}
function antiRobotDefense(){
document.body.onmousedown=function(){
antiRobot |= 2;
antiRobotGo();
document.body.onmousedown=null;
}
document.body.onmousemove=function(){
antiRobot |= 2;
antiRobotGo();
document.body.onmousemove=null;
}
setTimeout(function(){
antiRobot |= 1;
antiRobotGo();
}, 100)
antiRobotGo();
}
antiRobotDefense();
</script>
<!-- keywords: sqlite3_snapshot_get -->

<blockquote><pre>int sqlite3_snapshot_get(
  sqlite3 *db,
  const char *zSchema,
  sqlite3_snapshot **ppSnapshot
);
</pre></blockquote>
<p>
The <a href="snapshot_get.htm">sqlite3_snapshot_get(D,S,P)</a> interface attempts to make a
new <a href="snapshot.htm">sqlite3_snapshot</a> object that records the current state of
schema S in database connection D.  On success, the
<a href="snapshot_get.htm">sqlite3_snapshot_get(D,S,P)</a> interface writes a pointer to the newly
created <a href="snapshot.htm">sqlite3_snapshot</a> object into *P and returns SQLITE_OK.
If there is not already a read-transaction open on schema S when
this function is called, one is opened automatically.</p>

<p>If a read-transaction is opened by this function, then it is guaranteed
that the returned snapshot object may not be invalidated by a database
writer or checkpointer until after the read-transaction is closed. This
is not guaranteed if a read-transaction is already open when this
function is called. In that case, any subsequent write or checkpoint
operation on the database may invalidate the returned snapshot handle,
even while the read-transaction remains open.</p>

<p>The following must be true for this function to succeed. If any of
the following statements are false when sqlite3_snapshot_get() is
called, SQLITE_ERROR is returned. The final value of *P is undefined
in this case.</p>

<p></p><ul>
<li> The database handle must not be in <a href="get_autocommit.htm">autocommit mode</a>.<p></p>

<p></p></li><li> Schema S of <a href="sqlite3.htm">database connection</a> D must be a <a href="../wal.html">WAL mode</a> database.<p></p>

<p></p></li><li> There must not be a write transaction open on schema S of database
connection D.<p></p>

<p></p></li><li> One or more transactions must have been written to the current wal
file since it was created on disk (by any connection). This means
that a snapshot cannot be taken on a wal mode database with no wal
file immediately after it is first opened. At least one transaction
must be written to it first.
</li></ul><p></p>

<p>This function may also return SQLITE_NOMEM.  If it is called with the
database handle in autocommit mode but fails for some other reason,
whether or not a read transaction is opened on schema S is undefined.</p>

<p>The <a href="snapshot.htm">sqlite3_snapshot</a> object returned from a successful call to
<a href="snapshot_get.htm">sqlite3_snapshot_get()</a> must be freed using <a href="snapshot_free.htm">sqlite3_snapshot_free()</a>
to avoid a memory leak.</p>

<p>The <a href="snapshot_get.htm">sqlite3_snapshot_get()</a> interface is only available when the
<a href="../compile.html#enable_snapshot">SQLITE_ENABLE_SNAPSHOT</a> compile-time option is used.
</p><p>See also lists of
  <a href="objlist.htm">Objects</a>,
  <a href="constlist.htm">Constants</a>, and
  <a href="funclist.htm">Functions</a>.</p>

</body></html>