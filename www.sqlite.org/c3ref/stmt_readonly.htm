<!DOCTYPE html><html><head>
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta http-equiv="content-type" content="text/html; charset=UTF-8">

<title>Determine If An SQL Statement Writes The Database</title>
<!-- path=../ -->
</head>
<body>

<script>
function toggle_div(nm) {
var w = document.getElementById(nm);
if( w.style.display=="block" ){
w.style.display = "none";
}else{
w.style.display = "block";
}
}
function toggle_search() {
var w = document.getElementById("searchmenu");
if( w.style.display=="block" ){
w.style.display = "none";
} else {
w.style.display = "block";
setTimeout(function(){
document.getElementById("searchbox").focus()
}, 30);
}
}
function div_off(nm){document.getElementById(nm).style.display="none";}
window.onbeforeunload = function(e){div_off("submenu");}
/* Disable the Search feature if we are not operating from CGI, since */
/* Search is accomplished using CGI and will not work without it. */
if( !location.origin || !location.origin.match || !location.origin.match(/http/) ){
document.getElementById("search_menubutton").style.display = "none";
}
/* Used by the Hide/Show button beside syntax diagrams, to toggle the */
function hideorshow(btn,obj){
var x = document.getElementById(obj);
var b = document.getElementById(btn);
if( x.style.display!='none' ){
x.style.display = 'none';
b.innerHTML='show';
}else{
x.style.display = '';
b.innerHTML='hide';
}
return false;
}
var antiRobot = 0;
function antiRobotGo(){
if( antiRobot!=3 ) return;
antiRobot = 7;
var j = document.getElementById("mtimelink");
if(j && j.hasAttribute("data-href")) j.href=j.getAttribute("data-href");
}
function antiRobotDefense(){
document.body.onmousedown=function(){
antiRobot |= 2;
antiRobotGo();
document.body.onmousedown=null;
}
document.body.onmousemove=function(){
antiRobot |= 2;
antiRobotGo();
document.body.onmousemove=null;
}
setTimeout(function(){
antiRobot |= 1;
antiRobotGo();
}, 100)
antiRobotGo();
}
antiRobotDefense();
</script>
<!-- keywords: sqlite3_stmt_readonly -->

<blockquote><pre>int sqlite3_stmt_readonly(sqlite3_stmt *pStmt);
</pre></blockquote>
<p>
The sqlite3_stmt_readonly(X) interface returns true (non-zero) if
and only if the <a href="stmt.htm">prepared statement</a> X makes no direct changes to
the content of the database file.</p>

<p>Note that <a href="../appfunc.html">application-defined SQL functions</a> or
<a href="../vtab.html">virtual tables</a> might change the database indirectly as a side effect.
For example, if an application defines a function "eval()" that
calls <a href="exec.htm">sqlite3_exec()</a>, then the following SQL statement would
change the database file through side-effects:</p>

<p></p><blockquote><pre>SELECT eval('DELETE FROM t1') FROM t2;
</pre></blockquote><p></p>

<p>But because the <a href="../lang_select.html">SELECT</a> statement does not change the database file
directly, sqlite3_stmt_readonly() would still return true.</p>

<p>Transaction control statements such as <a href="../lang_transaction.html">BEGIN</a>, <a href="../lang_transaction.html">COMMIT</a>, <a href="../lang_transaction.html">ROLLBACK</a>,
<a href="../lang_savepoint.html">SAVEPOINT</a>, and <a href="../lang_savepoint.html">RELEASE</a> cause sqlite3_stmt_readonly() to return true,
since the statements themselves do not actually modify the database but
rather they control the timing of when other statements modify the
database.  The <a href="../lang_attach.html">ATTACH</a> and <a href="../lang_detach.html">DETACH</a> statements also cause
sqlite3_stmt_readonly() to return true since, while those statements
change the configuration of a database connection, they do not make
changes to the content of the database files on disk.
The sqlite3_stmt_readonly() interface returns true for <a href="../lang_transaction.html">BEGIN</a> since
<a href="../lang_transaction.html">BEGIN</a> merely sets internal flags, but the <a href="../lang_transaction.html">BEGIN IMMEDIATE</a> and
<a href="../lang_transaction.html">BEGIN EXCLUSIVE</a> commands do touch the database and so
sqlite3_stmt_readonly() returns false for those commands.</p>

<p>This routine returns false if there is any possibility that the
statement might change the database file.  A false return does
not guarantee that the statement will change the database file.
For example, an UPDATE statement might have a WHERE clause that
makes it a no-op, but the sqlite3_stmt_readonly() result would still
be false.  Similarly, a CREATE TABLE IF NOT EXISTS statement is a
read-only no-op if the table already exists, but
sqlite3_stmt_readonly() still returns false for such a statement.</p>

<p>If prepared statement X is an <a href="../lang_explain.html">EXPLAIN</a> or <a href="../eqp.html">EXPLAIN QUERY PLAN</a>
statement, then sqlite3_stmt_readonly(X) returns the same value as
if the EXPLAIN or EXPLAIN QUERY PLAN prefix were omitted.
</p><p>See also lists of
  <a href="objlist.htm">Objects</a>,
  <a href="constlist.htm">Constants</a>, and
  <a href="funclist.htm">Functions</a>.</p>

</body></html>