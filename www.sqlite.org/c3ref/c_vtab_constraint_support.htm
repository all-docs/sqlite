<!DOCTYPE html><html><head>
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta http-equiv="content-type" content="text/html; charset=UTF-8">

<title>Virtual Table Configuration Options</title>
<!-- path=../ -->
</head>
<body>

<script>
function toggle_div(nm) {
var w = document.getElementById(nm);
if( w.style.display=="block" ){
w.style.display = "none";
}else{
w.style.display = "block";
}
}
function toggle_search() {
var w = document.getElementById("searchmenu");
if( w.style.display=="block" ){
w.style.display = "none";
} else {
w.style.display = "block";
setTimeout(function(){
document.getElementById("searchbox").focus()
}, 30);
}
}
function div_off(nm){document.getElementById(nm).style.display="none";}
window.onbeforeunload = function(e){div_off("submenu");}
/* Disable the Search feature if we are not operating from CGI, since */
/* Search is accomplished using CGI and will not work without it. */
if( !location.origin || !location.origin.match || !location.origin.match(/http/) ){
document.getElementById("search_menubutton").style.display = "none";
}
/* Used by the Hide/Show button beside syntax diagrams, to toggle the */
function hideorshow(btn,obj){
var x = document.getElementById(obj);
var b = document.getElementById(btn);
if( x.style.display!='none' ){
x.style.display = 'none';
b.innerHTML='show';
}else{
x.style.display = '';
b.innerHTML='hide';
}
return false;
}
var antiRobot = 0;
function antiRobotGo(){
if( antiRobot!=3 ) return;
antiRobot = 7;
var j = document.getElementById("mtimelink");
if(j && j.hasAttribute("data-href")) j.href=j.getAttribute("data-href");
}
function antiRobotDefense(){
document.body.onmousedown=function(){
antiRobot |= 2;
antiRobotGo();
document.body.onmousedown=null;
}
document.body.onmousemove=function(){
antiRobot |= 2;
antiRobotGo();
document.body.onmousemove=null;
}
setTimeout(function(){
antiRobot |= 1;
antiRobotGo();
}, 100)
antiRobotGo();
}
antiRobotDefense();
</script>
<!-- keywords: SQLITE_VTAB_CONSTRAINT_SUPPORT SQLITE_VTAB_DIRECTONLY SQLITE_VTAB_INNOCUOUS SQLITE_VTAB_USES_ALL_SCHEMAS {virtual table configuration option} {virtual table configuration options} -->

<blockquote><pre>#define SQLITE_VTAB_CONSTRAINT_SUPPORT 1
#define SQLITE_VTAB_INNOCUOUS          2
#define SQLITE_VTAB_DIRECTONLY         3
#define SQLITE_VTAB_USES_ALL_SCHEMAS   4
</pre></blockquote>
<p>
These macros define the various options to the
<a href="vtab_config.htm">sqlite3_vtab_config()</a> interface that <a href="../vtab.html">virtual table</a> implementations
can use to customize and optimize their behavior.</p>

<p></p><dl>
<a name="sqlitevtabconstraintsupport"></a>

<dt>SQLITE_VTAB_CONSTRAINT_SUPPORT</dt>
<dd>Calls of the form
<a href="vtab_config.htm">sqlite3_vtab_config</a>(db,SQLITE_VTAB_CONSTRAINT_SUPPORT,X) are supported,
where X is an integer.  If X is zero, then the <a href="../vtab.html">virtual table</a> whose
<a href="../vtab.html#xcreate">xCreate</a> or <a href="../vtab.html#xconnect">xConnect</a> method invoked <a href="vtab_config.htm">sqlite3_vtab_config()</a> does not
support constraints.  In this configuration (which is the default) if
a call to the <a href="../vtab.html#xupdate">xUpdate</a> method returns <a href="../rescode.html#constraint">SQLITE_CONSTRAINT</a>, then the entire
statement is rolled back as if <a href="../lang_conflict.html">OR ABORT</a> had been
specified as part of the users SQL statement, regardless of the actual
ON CONFLICT mode specified.<p></p>

<p>If X is non-zero, then the virtual table implementation guarantees
that if <a href="../vtab.html#xupdate">xUpdate</a> returns <a href="../rescode.html#constraint">SQLITE_CONSTRAINT</a>, it will do so before
any modifications to internal or persistent data structures have been made.
If the <a href="../lang_conflict.html">ON CONFLICT</a> mode is ABORT, FAIL, IGNORE or ROLLBACK, SQLite
is able to roll back a statement or database transaction, and abandon
or continue processing the current SQL statement as appropriate.
If the ON CONFLICT mode is REPLACE and the <a href="../vtab.html#xupdate">xUpdate</a> method returns
<a href="../rescode.html#constraint">SQLITE_CONSTRAINT</a>, SQLite handles this as if the ON CONFLICT mode
had been ABORT.</p>

<p>Virtual table implementations that are required to handle OR REPLACE
must do so within the <a href="../vtab.html#xupdate">xUpdate</a> method. If a call to the
<a href="vtab_on_conflict.htm">sqlite3_vtab_on_conflict()</a> function indicates that the current ON
CONFLICT policy is REPLACE, the virtual table implementation should
silently replace the appropriate rows within the xUpdate callback and
return SQLITE_OK. Or, if this is not possible, it may return
SQLITE_CONSTRAINT, in which case SQLite falls back to OR ABORT
constraint handling.
</p></dd><p></p>

<p><a name="sqlitevtabdirectonly"></a>
</p><dt>SQLITE_VTAB_DIRECTONLY</dt>
<dd>Calls of the form
<a href="vtab_config.htm">sqlite3_vtab_config</a>(db,SQLITE_VTAB_DIRECTONLY) from within the
the <a href="../vtab.html#xconnect">xConnect</a> or <a href="../vtab.html#xcreate">xCreate</a> methods of a <a href="../vtab.html">virtual table</a> implementation
prohibits that virtual table from being used from within triggers and
views.
</dd><p></p>

<p><a name="sqlitevtabinnocuous"></a>
</p><dt>SQLITE_VTAB_INNOCUOUS</dt>
<dd>Calls of the form
<a href="vtab_config.htm">sqlite3_vtab_config</a>(db,SQLITE_VTAB_INNOCUOUS) from within the
the <a href="../vtab.html#xconnect">xConnect</a> or <a href="../vtab.html#xcreate">xCreate</a> methods of a <a href="../vtab.html">virtual table</a> implementation
identify that virtual table as being safe to use from within triggers
and views.  Conceptually, the SQLITE_VTAB_INNOCUOUS tag means that the
virtual table can do no serious harm even if it is controlled by a
malicious hacker.  Developers should avoid setting the SQLITE_VTAB_INNOCUOUS
flag unless absolutely necessary.
</dd><p></p>

<p><a name="sqlitevtabusesallschemas"></a>
</p><dt>SQLITE_VTAB_USES_ALL_SCHEMAS</dt>
<dd>Calls of the form
<a href="vtab_config.htm">sqlite3_vtab_config</a>(db,SQLITE_VTAB_USES_ALL_SCHEMA) from within the
the <a href="../vtab.html#xconnect">xConnect</a> or <a href="../vtab.html#xcreate">xCreate</a> methods of a <a href="../vtab.html">virtual table</a> implementation
instruct the query planner to begin at least a read transaction on
all schemas ("main", "temp", and any ATTACH-ed databases) whenever the
virtual table is used.
</dd>
</dl>
<p></p><p>See also lists of
  <a href="objlist.htm">Objects</a>,
  <a href="constlist.htm">Constants</a>, and
  <a href="funclist.htm">Functions</a>.</p>

</body></html>