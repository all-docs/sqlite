<!DOCTYPE html><html><head>
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta http-equiv="content-type" content="text/html; charset=UTF-8">

<title>SQLite Runtime Status</title>
<!-- path=../ -->
</head>
<body>

<script>
function toggle_div(nm) {
var w = document.getElementById(nm);
if( w.style.display=="block" ){
w.style.display = "none";
}else{
w.style.display = "block";
}
}
function toggle_search() {
var w = document.getElementById("searchmenu");
if( w.style.display=="block" ){
w.style.display = "none";
} else {
w.style.display = "block";
setTimeout(function(){
document.getElementById("searchbox").focus()
}, 30);
}
}
function div_off(nm){document.getElementById(nm).style.display="none";}
window.onbeforeunload = function(e){div_off("submenu");}
/* Disable the Search feature if we are not operating from CGI, since */
/* Search is accomplished using CGI and will not work without it. */
if( !location.origin || !location.origin.match || !location.origin.match(/http/) ){
document.getElementById("search_menubutton").style.display = "none";
}
/* Used by the Hide/Show button beside syntax diagrams, to toggle the */
function hideorshow(btn,obj){
var x = document.getElementById(obj);
var b = document.getElementById(btn);
if( x.style.display!='none' ){
x.style.display = 'none';
b.innerHTML='show';
}else{
x.style.display = '';
b.innerHTML='hide';
}
return false;
}
var antiRobot = 0;
function antiRobotGo(){
if( antiRobot!=3 ) return;
antiRobot = 7;
var j = document.getElementById("mtimelink");
if(j && j.hasAttribute("data-href")) j.href=j.getAttribute("data-href");
}
function antiRobotDefense(){
document.body.onmousedown=function(){
antiRobot |= 2;
antiRobotGo();
document.body.onmousedown=null;
}
document.body.onmousemove=function(){
antiRobot |= 2;
antiRobotGo();
document.body.onmousemove=null;
}
setTimeout(function(){
antiRobot |= 1;
antiRobotGo();
}, 100)
antiRobotGo();
}
antiRobotDefense();
</script>
<!-- keywords: sqlite3_status sqlite3_status64 -->

<blockquote><pre>int sqlite3_status(int op, int *pCurrent, int *pHighwater, int resetFlag);
int sqlite3_status64(
  int op,
  sqlite3_int64 *pCurrent,
  sqlite3_int64 *pHighwater,
  int resetFlag
);
</pre></blockquote>
<p>
These interfaces are used to retrieve runtime status information
about the performance of SQLite, and optionally to reset various
highwater marks.  The first argument is an integer code for
the specific parameter to measure.  Recognized integer codes
are of the form <a href="c_status_malloc_count.htm">SQLITE_STATUS_...</a>.
The current value of the parameter is returned into *pCurrent.
The highest recorded value is returned in *pHighwater.  If the
resetFlag is true, then the highest record value is reset after
*pHighwater is written.  Some parameters do not record the highest
value.  For those parameters
nothing is written into *pHighwater and the resetFlag is ignored.
Other parameters record only the highwater mark and not the current
value.  For these latter parameters nothing is written into *pCurrent.</p>

<p>The sqlite3_status() and sqlite3_status64() routines return
SQLITE_OK on success and a non-zero <a href="../rescode.html">error code</a> on failure.</p>

<p>If either the current value or the highwater mark is too large to
be represented by a 32-bit integer, then the values returned by
sqlite3_status() are undefined.</p>

<p>See also: <a href="db_status.htm">sqlite3_db_status()</a>
</p><p>See also lists of
  <a href="objlist.htm">Objects</a>,
  <a href="constlist.htm">Constants</a>, and
  <a href="funclist.htm">Functions</a>.</p>

</body></html>