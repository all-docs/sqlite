<!DOCTYPE html><html><head>
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta http-equiv="content-type" content="text/html; charset=UTF-8">

<title>Recover snapshots from a wal file</title>
<!-- path=../ -->
</head>
<body>

<script>
function toggle_div(nm) {
var w = document.getElementById(nm);
if( w.style.display=="block" ){
w.style.display = "none";
}else{
w.style.display = "block";
}
}
function toggle_search() {
var w = document.getElementById("searchmenu");
if( w.style.display=="block" ){
w.style.display = "none";
} else {
w.style.display = "block";
setTimeout(function(){
document.getElementById("searchbox").focus()
}, 30);
}
}
function div_off(nm){document.getElementById(nm).style.display="none";}
window.onbeforeunload = function(e){div_off("submenu");}
/* Disable the Search feature if we are not operating from CGI, since */
/* Search is accomplished using CGI and will not work without it. */
if( !location.origin || !location.origin.match || !location.origin.match(/http/) ){
document.getElementById("search_menubutton").style.display = "none";
}
/* Used by the Hide/Show button beside syntax diagrams, to toggle the */
function hideorshow(btn,obj){
var x = document.getElementById(obj);
var b = document.getElementById(btn);
if( x.style.display!='none' ){
x.style.display = 'none';
b.innerHTML='show';
}else{
x.style.display = '';
b.innerHTML='hide';
}
return false;
}
var antiRobot = 0;
function antiRobotGo(){
if( antiRobot!=3 ) return;
antiRobot = 7;
var j = document.getElementById("mtimelink");
if(j && j.hasAttribute("data-href")) j.href=j.getAttribute("data-href");
}
function antiRobotDefense(){
document.body.onmousedown=function(){
antiRobot |= 2;
antiRobotGo();
document.body.onmousedown=null;
}
document.body.onmousemove=function(){
antiRobot |= 2;
antiRobotGo();
document.body.onmousemove=null;
}
setTimeout(function(){
antiRobot |= 1;
antiRobotGo();
}, 100)
antiRobotGo();
}
antiRobotDefense();
</script>
<!-- keywords: sqlite3_snapshot_recover -->

<blockquote><pre>int sqlite3_snapshot_recover(sqlite3 *db, const char *zDb);
</pre></blockquote>
<p>
If a <a href="../wal.html#walfile">WAL file</a> remains on disk after all database connections close
(either through the use of the <a href="c_fcntl_begin_atomic_write.htm">SQLITE_FCNTL_PERSIST_WAL</a> <a href="file_control.htm">file control</a>
or because the last process to have the database opened exited without
calling <a href="close.htm">sqlite3_close()</a>) and a new connection is subsequently opened
on that database and <a href="../wal.html#walfile">WAL file</a>, the <a href="snapshot_open.htm">sqlite3_snapshot_open()</a> interface
will only be able to open the last transaction added to the WAL file
even though the WAL file contains other valid transactions.</p>

<p>This function attempts to scan the WAL file associated with database zDb
of database handle db and make all valid snapshots available to
sqlite3_snapshot_open(). It is an error if there is already a read
transaction open on the database, or if the database is not a WAL mode
database.</p>

<p>SQLITE_OK is returned if successful, or an SQLite error code otherwise.</p>

<p>This interface is only available if SQLite is compiled with the
<a href="../compile.html#enable_snapshot">SQLITE_ENABLE_SNAPSHOT</a> option.
</p><p>See also lists of
  <a href="objlist.htm">Objects</a>,
  <a href="constlist.htm">Constants</a>, and
  <a href="funclist.htm">Functions</a>.</p>

</body></html>