<!DOCTYPE html><html><head>
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta http-equiv="content-type" content="text/html; charset=UTF-8">

<title>A Handle To An Open BLOB</title>
<!-- path=../ -->
</head>
<body>

<script>
function toggle_div(nm) {
var w = document.getElementById(nm);
if( w.style.display=="block" ){
w.style.display = "none";
}else{
w.style.display = "block";
}
}
function toggle_search() {
var w = document.getElementById("searchmenu");
if( w.style.display=="block" ){
w.style.display = "none";
} else {
w.style.display = "block";
setTimeout(function(){
document.getElementById("searchbox").focus()
}, 30);
}
}
function div_off(nm){document.getElementById(nm).style.display="none";}
window.onbeforeunload = function(e){div_off("submenu");}
/* Disable the Search feature if we are not operating from CGI, since */
/* Search is accomplished using CGI and will not work without it. */
if( !location.origin || !location.origin.match || !location.origin.match(/http/) ){
document.getElementById("search_menubutton").style.display = "none";
}
/* Used by the Hide/Show button beside syntax diagrams, to toggle the */
function hideorshow(btn,obj){
var x = document.getElementById(obj);
var b = document.getElementById(btn);
if( x.style.display!='none' ){
x.style.display = 'none';
b.innerHTML='show';
}else{
x.style.display = '';
b.innerHTML='hide';
}
return false;
}
var antiRobot = 0;
function antiRobotGo(){
if( antiRobot!=3 ) return;
antiRobot = 7;
var j = document.getElementById("mtimelink");
if(j && j.hasAttribute("data-href")) j.href=j.getAttribute("data-href");
}
function antiRobotDefense(){
document.body.onmousedown=function(){
antiRobot |= 2;
antiRobotGo();
document.body.onmousedown=null;
}
document.body.onmousemove=function(){
antiRobot |= 2;
antiRobotGo();
document.body.onmousemove=null;
}
setTimeout(function(){
antiRobot |= 1;
antiRobotGo();
}, 100)
antiRobotGo();
}
antiRobotDefense();
</script>
<!-- keywords: {BLOB handle} {BLOB handles} sqlite3_blob -->

<blockquote><pre>typedef struct sqlite3_blob sqlite3_blob;
</pre></blockquote>
<p>
An instance of this object represents an open BLOB on which
<a href="blob_open.htm">incremental BLOB I/O</a> can be performed.
Objects of this type are created by <a href="blob_open.htm">sqlite3_blob_open()</a>
and destroyed by <a href="blob_close.htm">sqlite3_blob_close()</a>.
The <a href="blob_read.htm">sqlite3_blob_read()</a> and <a href="blob_write.htm">sqlite3_blob_write()</a> interfaces
can be used to read or write small subsections of the BLOB.
The <a href="blob_bytes.htm">sqlite3_blob_bytes()</a> interface returns the size of the BLOB in bytes.
</p><p>1 Constructor using this object: <a href="blob_open.htm">sqlite3_blob_open()</a></p>
<p>1 Destructor using this object: <a href="blob_close.htm">sqlite3_blob_close()</a></p>
<p>4 Methods using this object:
 <a href="blob_bytes.htm">sqlite3_blob_bytes()</a>,
<a href="blob_read.htm">sqlite3_blob_read()</a>,
<a href="blob_reopen.htm">sqlite3_blob_reopen()</a>,
<a href="blob_write.htm">sqlite3_blob_write()</a></p>
<p>See also lists of
  <a href="objlist.htm">Objects</a>,
  <a href="constlist.htm">Constants</a>, and
  <a href="funclist.htm">Functions</a>.</p>

</body></html>