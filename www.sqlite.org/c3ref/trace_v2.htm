<!DOCTYPE html><html><head>
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta http-equiv="content-type" content="text/html; charset=UTF-8">

<title>SQL Trace Hook</title>
<!-- path=../ -->
</head>
<body>

<script>
function toggle_div(nm) {
var w = document.getElementById(nm);
if( w.style.display=="block" ){
w.style.display = "none";
}else{
w.style.display = "block";
}
}
function toggle_search() {
var w = document.getElementById("searchmenu");
if( w.style.display=="block" ){
w.style.display = "none";
} else {
w.style.display = "block";
setTimeout(function(){
document.getElementById("searchbox").focus()
}, 30);
}
}
function div_off(nm){document.getElementById(nm).style.display="none";}
window.onbeforeunload = function(e){div_off("submenu");}
/* Disable the Search feature if we are not operating from CGI, since */
/* Search is accomplished using CGI and will not work without it. */
if( !location.origin || !location.origin.match || !location.origin.match(/http/) ){
document.getElementById("search_menubutton").style.display = "none";
}
/* Used by the Hide/Show button beside syntax diagrams, to toggle the */
function hideorshow(btn,obj){
var x = document.getElementById(obj);
var b = document.getElementById(btn);
if( x.style.display!='none' ){
x.style.display = 'none';
b.innerHTML='show';
}else{
x.style.display = '';
b.innerHTML='hide';
}
return false;
}
var antiRobot = 0;
function antiRobotGo(){
if( antiRobot!=3 ) return;
antiRobot = 7;
var j = document.getElementById("mtimelink");
if(j && j.hasAttribute("data-href")) j.href=j.getAttribute("data-href");
}
function antiRobotDefense(){
document.body.onmousedown=function(){
antiRobot |= 2;
antiRobotGo();
document.body.onmousedown=null;
}
document.body.onmousemove=function(){
antiRobot |= 2;
antiRobotGo();
document.body.onmousemove=null;
}
setTimeout(function(){
antiRobot |= 1;
antiRobotGo();
}, 100)
antiRobotGo();
}
antiRobotDefense();
</script>
<!-- keywords: sqlite3_trace_v2 -->

<blockquote><pre>int sqlite3_trace_v2(
  sqlite3*,
  unsigned uMask,
  int(*xCallback)(unsigned,void*,void*,void*),
  void *pCtx
);
</pre></blockquote>
<p>
The sqlite3_trace_v2(D,M,X,P) interface registers a trace callback
function X against <a href="sqlite3.htm">database connection</a> D, using property mask M
and context pointer P.  If the X callback is
NULL or if the M mask is zero, then tracing is disabled.  The
M argument should be the bitwise OR-ed combination of
zero or more <a href="c_trace.htm">SQLITE_TRACE</a> constants.</p>

<p>Each call to either sqlite3_trace(D,X,P) or sqlite3_trace_v2(D,M,X,P)
overrides (cancels) all prior calls to sqlite3_trace(D,X,P) or
sqlite3_trace_v2(D,M,X,P) for the <a href="sqlite3.htm">database connection</a> D.  Each
database connection may have at most one trace callback.</p>

<p>The X callback is invoked whenever any of the events identified by
mask M occur.  The integer return value from the callback is currently
ignored, though this may change in future releases.  Callback
implementations should return zero to ensure future compatibility.</p>

<p>A trace callback is invoked with four arguments: callback(T,C,P,X).
The T argument is one of the <a href="c_trace.htm">SQLITE_TRACE</a>
constants to indicate why the callback was invoked.
The C argument is a copy of the context pointer.
The P and X arguments are pointers whose meanings depend on T.</p>

<p>The sqlite3_trace_v2() interface is intended to replace the legacy
interfaces <a href="profile.htm">sqlite3_trace()</a> and <a href="profile.htm">sqlite3_profile()</a>, both of which
are deprecated.
</p><p>See also lists of
  <a href="objlist.htm">Objects</a>,
  <a href="constlist.htm">Constants</a>, and
  <a href="funclist.htm">Functions</a>.</p>

</body></html>