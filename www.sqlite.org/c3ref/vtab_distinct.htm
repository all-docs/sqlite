<!DOCTYPE html><html><head>
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta http-equiv="content-type" content="text/html; charset=UTF-8">

<title>Determine if a virtual table query is DISTINCT</title>
<!-- path=../ -->
</head>
<body>

<script>
function toggle_div(nm) {
var w = document.getElementById(nm);
if( w.style.display=="block" ){
w.style.display = "none";
}else{
w.style.display = "block";
}
}
function toggle_search() {
var w = document.getElementById("searchmenu");
if( w.style.display=="block" ){
w.style.display = "none";
} else {
w.style.display = "block";
setTimeout(function(){
document.getElementById("searchbox").focus()
}, 30);
}
}
function div_off(nm){document.getElementById(nm).style.display="none";}
window.onbeforeunload = function(e){div_off("submenu");}
/* Disable the Search feature if we are not operating from CGI, since */
/* Search is accomplished using CGI and will not work without it. */
if( !location.origin || !location.origin.match || !location.origin.match(/http/) ){
document.getElementById("search_menubutton").style.display = "none";
}
/* Used by the Hide/Show button beside syntax diagrams, to toggle the */
function hideorshow(btn,obj){
var x = document.getElementById(obj);
var b = document.getElementById(btn);
if( x.style.display!='none' ){
x.style.display = 'none';
b.innerHTML='show';
}else{
x.style.display = '';
b.innerHTML='hide';
}
return false;
}
var antiRobot = 0;
function antiRobotGo(){
if( antiRobot!=3 ) return;
antiRobot = 7;
var j = document.getElementById("mtimelink");
if(j && j.hasAttribute("data-href")) j.href=j.getAttribute("data-href");
}
function antiRobotDefense(){
document.body.onmousedown=function(){
antiRobot |= 2;
antiRobotGo();
document.body.onmousedown=null;
}
document.body.onmousemove=function(){
antiRobot |= 2;
antiRobotGo();
document.body.onmousemove=null;
}
setTimeout(function(){
antiRobot |= 1;
antiRobotGo();
}, 100)
antiRobotGo();
}
antiRobotDefense();
</script>
<!-- keywords: sqlite3_vtab_distinct -->

<blockquote><pre>int sqlite3_vtab_distinct(sqlite3_index_info*);
</pre></blockquote>
<p>
This API may only be used from within an <a href="../vtab.html#xbestindex">xBestIndex method</a>
of a <a href="../vtab.html">virtual table</a> implementation. The result of calling this
interface from outside of xBestIndex() is undefined and probably harmful.</p>

<p>The sqlite3_vtab_distinct() interface returns an integer between 0 and
3.  The integer returned by sqlite3_vtab_distinct()
gives the virtual table additional information about how the query
planner wants the output to be ordered. As long as the virtual table
can meet the ordering requirements of the query planner, it may set
the "orderByConsumed" flag.</p>

<p></p><ol><li value="0"><p>
If the sqlite3_vtab_distinct() interface returns 0, that means
that the query planner needs the virtual table to return all rows in the
sort order defined by the "nOrderBy" and "aOrderBy" fields of the
<a href="index_info.htm">sqlite3_index_info</a> object.  This is the default expectation.  If the
virtual table outputs all rows in sorted order, then it is always safe for
the xBestIndex method to set the "orderByConsumed" flag, regardless of
the return value from sqlite3_vtab_distinct().
</p></li><li value="1"><p>
If the sqlite3_vtab_distinct() interface returns 1, that means
that the query planner does not need the rows to be returned in sorted order
as long as all rows with the same values in all columns identified by the
"aOrderBy" field are adjacent.  This mode is used when the query planner
is doing a GROUP BY.
</p></li><li value="2"><p>
If the sqlite3_vtab_distinct() interface returns 2, that means
that the query planner does not need the rows returned in any particular
order, as long as rows with the same values in all columns identified
by "aOrderBy" are adjacent.  Furthermore, when two or more rows
contain the same values for all columns identified by "colUsed", all but
one such row may optionally be omitted from the result.
The virtual table is not required to omit rows that are duplicates
over the "colUsed" columns, but if the virtual table can do that without
too much extra effort, it could potentially help the query to run faster.
This mode is used for a DISTINCT query.
</p></li><li value="3"><p>
If the sqlite3_vtab_distinct() interface returns 3, that means the
virtual table must return rows in the order defined by "aOrderBy" as
if the sqlite3_vtab_distinct() interface had returned 0.  However if
two or more rows in the result have the same values for all columns
identified by "colUsed", then all but one such row may optionally be
omitted.  Like when the return value is 2, the virtual table
is not required to omit rows that are duplicates over the "colUsed"
columns, but if the virtual table can do that without
too much extra effort, it could potentially help the query to run faster.
This mode is used for queries
that have both DISTINCT and ORDER BY clauses.
</p></li></ol><p></p>

<p></p><p>The following table summarizes the conditions under which the
virtual table is allowed to set the "orderByConsumed" flag based on
the value returned by sqlite3_vtab_distinct().  This table is a
restatement of the previous four paragraphs:</p>

<p></p><table border="1" cellspacing="0" cellpadding="10" width="90%">
<tbody><tr>
<td valign="top">sqlite3_vtab_distinct() return value
</td><td valign="top">Rows are returned in aOrderBy order
</td><td valign="top">Rows with the same value in all aOrderBy columns are adjacent
</td><td valign="top">Duplicates over all colUsed columns may be omitted
</td></tr><tr><td>0</td><td>yes</td><td>yes</td><td>no
</td></tr><tr><td>1</td><td>no</td><td>yes</td><td>no
</td></tr><tr><td>2</td><td>no</td><td>yes</td><td>yes
</td></tr><tr><td>3</td><td>yes</td><td>yes</td><td>yes
</td></tr></tbody></table><p></p>

<p>For the purposes of comparing virtual table output values to see if the
values are same value for sorting purposes, two NULL values are considered
to be the same.  In other words, the comparison operator is "IS"
(or "IS NOT DISTINCT FROM") and not "==".</p>

<p>If a virtual table implementation is unable to meet the requirements
specified above, then it must not set the "orderByConsumed" flag in the
<a href="index_info.htm">sqlite3_index_info</a> object or an incorrect answer may result.</p>

<p>A virtual table implementation is always free to return rows in any order
it wants, as long as the "orderByConsumed" flag is not set.  When the
the "orderByConsumed" flag is unset, the query planner will add extra
<a href="../opcode.html">bytecode</a> to ensure that the final results returned by the SQL query are
ordered correctly.  The use of the "orderByConsumed" flag and the
sqlite3_vtab_distinct() interface is merely an optimization.  Careful
use of the sqlite3_vtab_distinct() interface and the "orderByConsumed"
flag might help queries against a virtual table to run faster.  Being
overly aggressive and setting the "orderByConsumed" flag when it is not
valid to do so, on the other hand, might cause SQLite to return incorrect
results.
</p><p>See also lists of
  <a href="objlist.htm">Objects</a>,
  <a href="constlist.htm">Constants</a>, and
  <a href="funclist.htm">Functions</a>.</p>

</body></html>