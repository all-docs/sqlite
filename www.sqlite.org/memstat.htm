<!DOCTYPE html><html><head>
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta http-equiv="content-type" content="text/html; charset=UTF-8">

<title>The SQLITE_MEMSTAT Virtual Table</title>
<!-- path= -->
</head>
<body>

<script>
function toggle_div(nm) {
var w = document.getElementById(nm);
if( w.style.display=="block" ){
w.style.display = "none";
}else{
w.style.display = "block";
}
}
function toggle_search() {
var w = document.getElementById("searchmenu");
if( w.style.display=="block" ){
w.style.display = "none";
} else {
w.style.display = "block";
setTimeout(function(){
document.getElementById("searchbox").focus()
}, 30);
}
}
function div_off(nm){document.getElementById(nm).style.display="none";}
window.onbeforeunload = function(e){div_off("submenu");}
/* Disable the Search feature if we are not operating from CGI, since */
/* Search is accomplished using CGI and will not work without it. */
if( !location.origin || !location.origin.match || !location.origin.match(/http/) ){
document.getElementById("search_menubutton").style.display = "none";
}
/* Used by the Hide/Show button beside syntax diagrams, to toggle the */
function hideorshow(btn,obj){
var x = document.getElementById(obj);
var b = document.getElementById(btn);
if( x.style.display!='none' ){
x.style.display = 'none';
b.innerHTML='show';
}else{
x.style.display = '';
b.innerHTML='hide';
}
return false;
}
var antiRobot = 0;
function antiRobotGo(){
if( antiRobot!=3 ) return;
antiRobot = 7;
var j = document.getElementById("mtimelink");
if(j && j.hasAttribute("data-href")) j.href=j.getAttribute("data-href");
}
function antiRobotDefense(){
document.body.onmousedown=function(){
antiRobot |= 2;
antiRobotGo();
document.body.onmousedown=null;
}
document.body.onmousemove=function(){
antiRobot |= 2;
antiRobotGo();
document.body.onmousemove=null;
}
setTimeout(function(){
antiRobot |= 1;
antiRobotGo();
}, 100)
antiRobotGo();
}
antiRobotDefense();
</script>
<div class="fancy">





<h1 id="overview"><span>1. </span>Overview</h1>

<p>
The SQLITE_MEMSTAT extension implements an <a href="vtab.htm">eponymous-only virtual table</a> that
provides SQL access to the <a href="c3ref\status.htm">sqlite3_status64()</a> and
<a href="c3ref\db_status.htm">sqlite3_db_status()</a> interfaces.
</p>

<p>
The SQLITE_STMT extension can also be loaded at run-time
by compiling the extension into a shared library or DLL using the source
code at <a href="https://sqlite.org/src/file/ext/misc/memstat.c">https://sqlite.org/src/file/ext/misc/memstat.c</a> and following the
instructions for how to <a href="loadext.htm">compile loadable extensions</a>.
</p>

<h1 id="usage"><span>2. </span>Usage</h1>

<p>
The SQLITE_MEMSTAT virtual table is a read-only table that can be
queried to determine performance characteristics (primarily the
amount of memory being used) of the current instance of SQLite.
The SQLITE_MEMSTATE table is essentially a wrapper around the
C-language APIs <a href="c3ref\status.htm">sqlite3_status64()</a> and <a href="c3ref\db_status.htm">sqlite3_db_status()</a>.
If the 
<a href="https://sqlite.org/src/file/ext/misc/memstat.c">memstat.c</a> source
file is compiled with the -DSQLITE_ENABLE_ZIPVFS option, then SQLITE_MEMSTAT
will also do some <a href="c3ref\file_control.htm">file-control</a> calls to extract
memory usage information about the 
<a href="https://www.hwaci.com/sw/sqlite/zipvfs.html">ZIPVFS</a> subsystem, 
if that subsystem has been licensed, installed, and is in use.

</p><p>
The SQLITE_MEMSTAT table appears to have the following schema:

</p><div class="codeblock"><pre>CREATE TABLE sqlite_memstat(
  name TEXT,
  schema TEXT,
  value INT,
  hiwtr INT
);
</pre></div>

<p>
Each row of the SQLITE_MEMSTAT table corresponds to a single call to
one of the <a href="c3ref\status.htm">sqlite3_status64()</a> or <a href="c3ref\db_status.htm">sqlite3_db_status()</a> interfaces.
The NAME column of the row identifies which "verb" was passed to those
interfaces.  For example, if <a href="c3ref\status.htm">sqlite3_status64()</a> is invoked with
<a href="c3ref\c_status_malloc_count.htm">SQLITE_STATUS_MEMORY_USED</a>, then the NAME column is 'MEMORY_USED'.
Or if <a href="c3ref\db_status.htm">sqlite3_db_status()</a> is invoked with <a href="c3ref\c_dbstatus_options.htm">SQLITE_DBSTATUS_CACHE_USED</a>,
then the NAME column is "DB_CACHE_USED".

</p><p>
The SCHEMA column is NULL, except for cases when the <a href="c3ref\file_control.htm">sqlite3_file_control()</a>
interface is used to interrogate the ZIPVFS backend.  As this only happens
when the memstat.c module is compiled with -DSQLITE_ENABLE_ZIPVFS and when
<a href="https://www.hwaci.com/sw/sqlite/zipvfs.html">ZIPVFS</a> is in use, 
SCHEMA is usually NULL.

</p><p>
The VALUE and HIWTR columns report the current value of the measure and
its "high-water mark".  The high-water mark is the highest value ever seen
for the measurement, at least since the last reset.  The SQLITE_MEMSTAT
virtual table does not provide a mechanism for resetting the high-water mark.

</p><p>
Depending on which parameter is being interrogated, one of the VALUE
or HIWTR mark measurements might be undefined.  For example, only the
high-water mark is meaningful for <a href="c3ref\c_status_malloc_count.htm">SQLITE_STATUS_MALLOC_SIZE</a>, and
only the current value is meaningful for <a href="c3ref\c_dbstatus_options.htm">SQLITE_DBSTATUS_CACHE_USED</a>.
For rows where one or the other of VALUE or HIWTR is not meaningful,
that value is returned as NULL.
</p><p align="center"><small><i>This page last modified on  <a href="https://sqlite.org/docsrc/honeypot" id="mtimelink" data-href="https://sqlite.org/docsrc/finfo/pages/memstat.in?m=100a247ff2">2025-05-31 13:08:22</a> UTC </i></small></p>

</div></body></html>