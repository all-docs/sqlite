<!DOCTYPE html><html><head>
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta http-equiv="content-type" content="text/html; charset=UTF-8">

<title>The SQLITE_DBPAGE Virtual Table</title>
<!-- path= -->
</head>
<body>

<script>
function toggle_div(nm) {
var w = document.getElementById(nm);
if( w.style.display=="block" ){
w.style.display = "none";
}else{
w.style.display = "block";
}
}
function toggle_search() {
var w = document.getElementById("searchmenu");
if( w.style.display=="block" ){
w.style.display = "none";
} else {
w.style.display = "block";
setTimeout(function(){
document.getElementById("searchbox").focus()
}, 30);
}
}
function div_off(nm){document.getElementById(nm).style.display="none";}
window.onbeforeunload = function(e){div_off("submenu");}
/* Disable the Search feature if we are not operating from CGI, since */
/* Search is accomplished using CGI and will not work without it. */
if( !location.origin || !location.origin.match || !location.origin.match(/http/) ){
document.getElementById("search_menubutton").style.display = "none";
}
/* Used by the Hide/Show button beside syntax diagrams, to toggle the */
function hideorshow(btn,obj){
var x = document.getElementById(obj);
var b = document.getElementById(btn);
if( x.style.display!='none' ){
x.style.display = 'none';
b.innerHTML='show';
}else{
x.style.display = '';
b.innerHTML='hide';
}
return false;
}
var antiRobot = 0;
function antiRobotGo(){
if( antiRobot!=3 ) return;
antiRobot = 7;
var j = document.getElementById("mtimelink");
if(j && j.hasAttribute("data-href")) j.href=j.getAttribute("data-href");
}
function antiRobotDefense(){
document.body.onmousedown=function(){
antiRobot |= 2;
antiRobotGo();
document.body.onmousedown=null;
}
document.body.onmousemove=function(){
antiRobot |= 2;
antiRobotGo();
document.body.onmousemove=null;
}
setTimeout(function(){
antiRobot |= 1;
antiRobotGo();
}, 100)
antiRobotGo();
}
antiRobotDefense();
</script>
<div class="fancy">





<h1 id="overview"><span>1. </span>Overview</h1>

<p>
The SQLITE_DBPAGE extension implements an <a href="vtab.htm">eponymous-only virtual table</a> that
provides direct access to the underlying database file by interacting
with the pager.  SQLITE_DBPAGE is capable of both reading and writing any
page of the database.  Because interaction is through the pager layer, all
changes are transactional.
</p>

<p>
<b>Warning:</b> writing to the SQLITE_DBPAGE virtual table can very easily
cause unrecoverable database corruption.  Do not allow untrusted components
to access the SQLITE_DBPAGE table.  Use appropriate care while using the
SQLITE_DBPAGE table.  Back up important data prior to experimenting with the
SQLITE_DBPAGE table.  Writes to the SQLITE_DBPAGE virtual table are
disabled when the <a href="c3ref\c_dbconfig_defensive.htm">SQLITE_DBCONFIG_DEFENSIVE</a> flag is set.

</p><p>
The SQLITE_DBPAGE extension is included in the <a href="amalgamation.htm">amalgamation</a> though 
it is disabled
by default.  Use the <a href="compile.htm">SQLITE_ENABLE_DBPAGE_VTAB</a> compile-time option to enable
the SQLITE_DBPAGE extension.  The SQLITE_DBPAGE extension makes use of
unpublished internal interfaces and is not run-time loadable.  The only way
to add SQLITE_DBPAGE to an application is to compile it in using the
<a href="compile.htm">SQLITE_ENABLE_DBPAGE_VTAB</a> compile-time option.
</p>

<p>
The SQLITE_DBPAGE extension is enabled in default builds
of the <a href="cli.htm">command-line shell</a>, but is read-only by default.  Use
the --unsafe-testing command-line option to the CLI to enable writing
to the sqlite_dbpage virtual table.

</p><h1 id="usage"><span>2. </span>Usage</h1>

<p>
The SQLITE_DBPAGE virtual table read/write table that provides direct
access to the underlying disk file on a page-by-page basis.  The
virtual table appears to have a schema like this:

</p><div class="codeblock"><pre>CREATE TABLE sqlite_dbpage(
  pgno INTEGER PRIMARY KEY,
  data BLOB
);
</pre></div>

<p>
An SQLite database file is divided into pages.
The first page is 1, the second page is 2, and so forth.
There is no page 0.
Every page is the same size.
The size of every page is a power of 2 between 512 and 65536.
See the <a href="fileformat2.htm">file format</a> documentation for further details.

</p><p>
The SQLITE_DBPAGE table allows an application to view or replace the
raw binary content of each page of the database file.
No attempt is made to interpret the content of the page.
Content is returned byte-for-byte as it appears on disk.

</p><p>
The SQLITE_DBPAGE table has one row for each page in the database file.
SQLITE_DBPAGE allows pages to be read using a <a href="lang_select.htm">SELECT</a> statement or
to be overwritten using an <a href="lang_update.htm">UPDATE</a> or <a href="lang_insert.htm">INSERT</a> statement.  When using
an INSERT against sqlite_dbpage, it acts like <a href="lang_replace.htm">REPLACE</a>.  In other words,
INSERT into a page that already exists overwrites that page.  To increase
the size of a database, INSERT into a page beyond the end of the database.

</p><h2 id="using_sqlite_dbpage_on_attach_ed_databases"><span>2.1. </span>Using SQLITE_DBPAGE On ATTACH-ed Databases</h2>

<p>
The SQLITE_DBPAGE table schema shown above is incomplete.  There is
a third <a href="vtab.htm">hidden column</a> named "schema" that determines which
<a href="lang_attach.htm">ATTACH-ed database</a> should be read or written.  Because
the "schema" column is hidden, it can be used as a parameter when
SQLITE_DBPAGE is invoked as a <a href="vtab.htm">table-valued function</a>.

</p><p>
For example, suppose an additional database is attached to the 
database connection using a statement like this:

</p><div class="codeblock"><pre>ATTACH 'auxdata1.db' AS aux1;
</pre></div>

<p>
Then to read the first page of that database file, one merely runs:

</p><div class="codeblock"><pre>SELECT data FROM sqlite_dbpage('aux1') WHERE pgno=1;
</pre></div>

<p>
If the "schema" is omitted, it defaults to the primary database
(usually called 'main', unless renamed using <a href="c3ref\c_dbconfig_defensive.htm">SQLITE_DBCONFIG_MAINDBNAME</a>).
Hence, the following two queries are normally equivalent:

</p><div class="codeblock"><pre>SELECT data FROM sqlite_dbpage('main') WHERE pgno=1;
SELECT data FROM sqlite_dbpage WHERE pgno=1;
</pre></div>

<p>
The SQLITE_DBPAGE table can participate in a join just like any other
table.  Hence, to see the content of the first page to all connected
database files, one might run a statement like this:

</p><div class="codeblock"><pre>SELECT dbpage.data, dblist.name
  FROM pragma_database_list AS dblist
  JOIN sqlite_dbpage(dblist.name) AS dbpage
 WHERE dbpage.pgno=1;
</pre></div>

<h2 id="truncating_a_database"><span>2.2. </span>Truncating A Database</h2>

<p>
Normally the data for UPDATE and INSERT must be a blob which is the exact
same size as a database page.  However, as a special case, doing an INSERT
of a NULL into page 2 or greater as the last operation prior to COMMIT
causes the page being inserted into and all subsequent pages to be deleted,
truncating the database.  For example, a command like
"<tt>INSERT INTO sqlite_dbpage(pgno,data) VALUES(52,NULL)</tt>" causes
the database to be truncated to 51 pages in length. Pages are numbered
beginning with 1, so the total number of pages remaining is the same as
the last page number or 51 in this case. 

</p><p>
Call an INSERT into sqlite_dbpage with a NULL page content
a "null-INSERT".  The null-INSERT behavior is a special case and does
not necessarily follow the usual rules.  The following are some specific
limitations of null-INSERT:

</p><ol>
<li><p>
The sqlite_dbpage table does not allow a null-INSERT into page 1.
Hence, it is not possible to truncate a database to zero bytes or
zero pages using sqlite_dbpage, as doing so would omit the database
header and the file would cease to be an SQLite database.

</p></li><li><p>
A null-INSERT only truncates the database if it is the last write
operation to occur before the transaction commit.  If the null-INSERT is
within a multi-statement transaction and is followed by one or more UPDATE
or INSERT operations within that same transaction, then the null-INSERT
becomes a no-op and the database is not truncated.

</p></li><li><p>
Only a single database file can be truncated per transaction.
The sqlite_dbpage virtual table is able to write to multiple ATTACH-ed
databases during the same transaction, but because a null-INSERT must
be the last write statement to occur before COMMIT, sqlite_dbpage can
only truncate one of the ATTACH-ed databases.  If multiple ATTACH-ed
databases need to be truncated, each must be truncated in a separate
transaction.

</p></li><li><p>
Any <a href="lang_savepoint.htm">ROLLBACK TO</a> will cancel the null-INSERT,
even a ROLLBACK TO that does not involve the null-INSERT itself.  The
special behavior of null-INSERT is only guaranteed if it occurs
as its own transaction or immediately before COMMIT.
</p></li></ol>

<h1 id="compatibility"><span>3. </span>Compatibility</h1>

<p>
The ability to do an INSERT into sqlite_dbpage, and to increase
or decrease the size of the database using INSERT was added in
SQLite version 3.47.0 (2024-10-21).  Older versions do not allow
INSERT against sqlite_dbpage.
</p><p align="center"><small><i>This page last modified on  <a href="https://sqlite.org/docsrc/honeypot" id="mtimelink" data-href="https://sqlite.org/docsrc/finfo/pages/dbpage.in?m=62ee40472a">2024-10-22 19:45:21</a> UTC </i></small></p>

</div></body></html>