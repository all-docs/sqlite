<!DOCTYPE html><html><head>
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta http-equiv="content-type" content="text/html; charset=UTF-8">

<title>High Reliability</title>
<!-- path= -->
</head>
<body>

<script>
function toggle_div(nm) {
var w = document.getElementById(nm);
if( w.style.display=="block" ){
w.style.display = "none";
}else{
w.style.display = "block";
}
}
function toggle_search() {
var w = document.getElementById("searchmenu");
if( w.style.display=="block" ){
w.style.display = "none";
} else {
w.style.display = "block";
setTimeout(function(){
document.getElementById("searchbox").focus()
}, 30);
}
}
function div_off(nm){document.getElementById(nm).style.display="none";}
window.onbeforeunload = function(e){div_off("submenu");}
/* Disable the Search feature if we are not operating from CGI, since */
/* Search is accomplished using CGI and will not work without it. */
if( !location.origin || !location.origin.match || !location.origin.match(/http/) ){
document.getElementById("search_menubutton").style.display = "none";
}
/* Used by the Hide/Show button beside syntax diagrams, to toggle the */
function hideorshow(btn,obj){
var x = document.getElementById(obj);
var b = document.getElementById(btn);
if( x.style.display!='none' ){
x.style.display = 'none';
b.innerHTML='show';
}else{
x.style.display = '';
b.innerHTML='hide';
}
return false;
}
var antiRobot = 0;
function antiRobotGo(){
if( antiRobot!=3 ) return;
antiRobot = 7;
var j = document.getElementById("mtimelink");
if(j && j.hasAttribute("data-href")) j.href=j.getAttribute("data-href");
}
function antiRobotDefense(){
document.body.onmousedown=function(){
antiRobot |= 2;
antiRobotGo();
document.body.onmousedown=null;
}
document.body.onmousemove=function(){
antiRobot |= 2;
antiRobotGo();
document.body.onmousemove=null;
}
setTimeout(function(){
antiRobot |= 1;
antiRobotGo();
}, 100)
antiRobotGo();
}
antiRobotDefense();
</script>
<div class="fancy">






<p>
SQLite is a high-reliability storage solution.  It does not give
problems.  It just works.

</p><p>
The high-reliability of SQLite is proven in practice.
SQLite has been used without problems in multiple billions of smart-phones, 
IoT devices, and desktop applications, around the world, and for almost two
decades.

</p><p>
SQLite responds gracefully to system errors.  Obscure out-of-memory and
I/O errors are reported back up to the application.  These error reporting
paths are all carefully tested to ensure they will always work.

</p><p>
SQLite is resilient in the face of corrupt inputs, including maliciously
designed database files and SQL strings.  Extensive fuzz-testing ensures
that corrupt inputs will not lead to crashes or undefined behavior, but
will instead cause sensible errors to be reported back to the application.
(<a href="security.htm">More...</a>)

</p><p>
SQLite is built using a 
<a href="https://en.wikipedia.org/wiki/DO-178B">DO-178B</a>-inspired process.
The <a href="testing.htm">testing standards</a> for SQLite are among the highest for
commercial software.

</p><p>
SQLite is <a href="copyright.htm">open-source</a> but it is not open-contribution.
All the code in SQLite is written by a small team of experts.
The project does not accept "pull requests" or patches from 
anonymous passers-by on the internet.

</p><p>
The developers of SQLite intend to support the product through
the year 2050.  To this end, the source code is carefully documented
to promote long-term maintainability.  We prefer mature and stable
over trendy and cutting-edge.

</p><p>
All of these factors combine to make SQLite a very trouble-free
software library.
</p>

</div></body></html>