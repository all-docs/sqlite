<!DOCTYPE html><html><head>
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta http-equiv="content-type" content="text/html; charset=UTF-8">

<title>Create An Iterator To Traverse A Changeset </title>
<!-- path=../ -->
</head>
<body>

<script>
function toggle_div(nm) {
var w = document.getElementById(nm);
if( w.style.display=="block" ){
w.style.display = "none";
}else{
w.style.display = "block";
}
}
function toggle_search() {
var w = document.getElementById("searchmenu");
if( w.style.display=="block" ){
w.style.display = "none";
} else {
w.style.display = "block";
setTimeout(function(){
document.getElementById("searchbox").focus()
}, 30);
}
}
function div_off(nm){document.getElementById(nm).style.display="none";}
window.onbeforeunload = function(e){div_off("submenu");}
/* Disable the Search feature if we are not operating from CGI, since */
/* Search is accomplished using CGI and will not work without it. */
if( !location.origin || !location.origin.match || !location.origin.match(/http/) ){
document.getElementById("search_menubutton").style.display = "none";
}
/* Used by the Hide/Show button beside syntax diagrams, to toggle the */
function hideorshow(btn,obj){
var x = document.getElementById(obj);
var b = document.getElementById(btn);
if( x.style.display!='none' ){
x.style.display = 'none';
b.innerHTML='show';
}else{
x.style.display = '';
b.innerHTML='hide';
}
return false;
}
var antiRobot = 0;
function antiRobotGo(){
if( antiRobot!=3 ) return;
antiRobot = 7;
var j = document.getElementById("mtimelink");
if(j && j.hasAttribute("data-href")) j.href=j.getAttribute("data-href");
}
function antiRobotDefense(){
document.body.onmousedown=function(){
antiRobot |= 2;
antiRobotGo();
document.body.onmousedown=null;
}
document.body.onmousemove=function(){
antiRobot |= 2;
antiRobotGo();
document.body.onmousemove=null;
}
setTimeout(function(){
antiRobot |= 1;
antiRobotGo();
}, 100)
antiRobotGo();
}
antiRobotDefense();
</script>
<a href="intro.htm"><h2>Session Module C Interface</h2></a><h2>Create An Iterator To Traverse A Changeset </h2><blockquote><pre>int sqlite3changeset_start(
  sqlite3_changeset_iter **pp,    /* OUT: New changeset iterator handle */
  int nChangeset,                 /* Size of changeset blob in bytes */
  void *pChangeset                /* Pointer to blob containing changeset */
);
int sqlite3changeset_start_v2(
  sqlite3_changeset_iter **pp,    /* OUT: New changeset iterator handle */
  int nChangeset,                 /* Size of changeset blob in bytes */
  void *pChangeset,               /* Pointer to blob containing changeset */
  int flags                       /* SESSION_CHANGESETSTART_* flags */
);
</pre></blockquote><p>
Create an iterator used to iterate through the contents of a changeset.
If successful, *pp is set to point to the iterator handle and SQLITE_OK
is returned. Otherwise, if an error occurs, *pp is set to zero and an
SQLite error code is returned.</p>

<p>The following functions can be used to advance and query a changeset 
iterator created by this function:</p>

<p></p><ul>
  <li> <a href="sqlite3changeset_next.htm">sqlite3changeset_next()</a>
  </li><li> <a href="sqlite3changeset_op.htm">sqlite3changeset_op()</a>
  </li><li> <a href="sqlite3changeset_new.htm">sqlite3changeset_new()</a>
  </li><li> <a href="sqlite3changeset_old.htm">sqlite3changeset_old()</a>
</li></ul><p></p>

<p>It is the responsibility of the caller to eventually destroy the iterator
by passing it to <a href="sqlite3changeset_finalize.htm">sqlite3changeset_finalize()</a>. The buffer containing the
changeset (pChangeset) must remain valid until after the iterator is
destroyed.</p>

<p>Assuming the changeset blob was created by one of the
<a href="sqlite3session_changeset.htm">sqlite3session_changeset()</a>, <a href="sqlite3changeset_concat.htm">sqlite3changeset_concat()</a> or
<a href="sqlite3changeset_invert.htm">sqlite3changeset_invert()</a> functions, all changes within the changeset 
that apply to a single table are grouped together. This means that when 
an application iterates through a changeset using an iterator created by 
this function, all changes that relate to a single table are visited 
consecutively. There is no chance that the iterator will visit a change 
the applies to table X, then one for table Y, and then later on visit 
another change for table X.</p>

<p>The behavior of sqlite3changeset_start_v2() and its streaming equivalent
may be modified by passing a combination of
<a href="c_changesetstart_invert.htm">supported flags</a> as the 4th parameter.</p>

<p>Note that the sqlite3changeset_start_v2() API is still <b>experimental</b>
and therefore subject to change.
</p><p>See also lists of
  <a href="objlist.htm">Objects</a>,
  <a href="constlist.htm">Constants</a>, and
  <a href="funclist.htm">Functions</a>.</p>

</body></html>