<!DOCTYPE html><html><head>
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta http-equiv="content-type" content="text/html; charset=UTF-8">

<title>Rowid Tables</title>
<!-- path= -->
</head>
<body>

<script>
function toggle_div(nm) {
var w = document.getElementById(nm);
if( w.style.display=="block" ){
w.style.display = "none";
}else{
w.style.display = "block";
}
}
function toggle_search() {
var w = document.getElementById("searchmenu");
if( w.style.display=="block" ){
w.style.display = "none";
} else {
w.style.display = "block";
setTimeout(function(){
document.getElementById("searchbox").focus()
}, 30);
}
}
function div_off(nm){document.getElementById(nm).style.display="none";}
window.onbeforeunload = function(e){div_off("submenu");}
/* Disable the Search feature if we are not operating from CGI, since */
/* Search is accomplished using CGI and will not work without it. */
if( !location.origin || !location.origin.match || !location.origin.match(/http/) ){
document.getElementById("search_menubutton").style.display = "none";
}
/* Used by the Hide/Show button beside syntax diagrams, to toggle the */
function hideorshow(btn,obj){
var x = document.getElementById(obj);
var b = document.getElementById(btn);
if( x.style.display!='none' ){
x.style.display = 'none';
b.innerHTML='show';
}else{
x.style.display = '';
b.innerHTML='hide';
}
return false;
}
var antiRobot = 0;
function antiRobotGo(){
if( antiRobot!=3 ) return;
antiRobot = 7;
var j = document.getElementById("mtimelink");
if(j && j.hasAttribute("data-href")) j.href=j.getAttribute("data-href");
}
function antiRobotDefense(){
document.body.onmousedown=function(){
antiRobot |= 2;
antiRobotGo();
document.body.onmousedown=null;
}
document.body.onmousemove=function(){
antiRobot |= 2;
antiRobotGo();
document.body.onmousemove=null;
}
setTimeout(function(){
antiRobot |= 1;
antiRobotGo();
}, 100)
antiRobotGo();
}
antiRobotDefense();
</script>


<h1 align="center">Rowid Tables</h1>

<h2>1.0 Definition</h2>

<p>A "rowid table" is any table in an SQLite schema that
</p><ul>
<li>is <em>not</em> a <a href="vtab.htm">virtual table</a>, and
</li><li>is <em>not</em> a <a href="withoutrowid.htm">WITHOUT ROWID</a> table.
</li></ul>
Most tables in a typical SQLite database schema are rowid tables.

<p>Rowid tables are distinguished by the fact that they all have
a unique, non-NULL, signed 64-bit integer <a href="lang_createtable.htm">rowid</a> that is used as
the access key for the data in the underlying <a href="fileformat2.htm">B-tree</a> storage engine.

</p><h2>2.0 Quirks</h2>

<ul>
<li><p>
The <a href="lang_createtable.htm">PRIMARY KEY</a> of a rowid table (if there is one) is usually not the
true primary key for the table, in the sense that it is not the unique
key used by the underlying <a href="fileformat2.htm">B-tree</a> storage engine.  The exception to
this rule is when the rowid table declares an <a href="lang_createtable.htm">INTEGER PRIMARY KEY</a>.
In the exception, the INTEGER PRIMARY KEY becomes an alias for the 
<a href="lang_createtable.htm">rowid</a>.

</p></li><li><p>
The true primary key for a rowid table (the value that is used as the
key to look up rows in the underlying <a href="fileformat2.htm">B-tree</a> storage engine)
is the <a href="lang_createtable.htm">rowid</a>.

</p></li><li><p>
The PRIMARY KEY constraint for a rowid table (as long as it is not
the true primary key or INTEGER PRIMARY KEY) is really the same thing
as a <a href="lang_createtable.htm">UNIQUE constraint</a>.  Because it is not a true primary key,
columns of the PRIMARY KEY are allowed to be NULL, in violation of
all SQL standards.

</p></li><li><p>
The <a href="lang_createtable.htm">rowid</a> of a rowid table can be accessed (or changed) by reading or
writing to any of the "rowid" or "oid" or "_rowid_" columns.  Except,
if there are declared columns in the table that use any of those
special names, then those names refer to the declared columns, not to
the underlying <a href="lang_createtable.htm">rowid</a>.

</p></li><li><p>
Access to records via <a href="lang_createtable.htm">rowid</a> is highly optimized and very fast.

</p></li><li><p>
If the <a href="lang_createtable.htm">rowid</a> is not aliased by <a href="lang_createtable.htm">INTEGER PRIMARY KEY</a> then it is not
persistent and might change.  In particular the <a href="lang_vacuum.htm">VACUUM</a> command will
change rowids for tables that do not declare an INTEGER PRIMARY KEY.
Therefore, applications should not normally access the rowid directly,
but instead use an INTEGER PRIMARY KEY.

</p></li><li><p>
In the underlying <a href="fileformat2.htm">file format</a>, each rowid is stored as a
<a href="fileformat2.htm">variable-length integer</a>.  That means that small non-negative
rowid values take up less disk space than large or negative
rowid values.

</p></li><li><p>
All of the complications above (and others not mentioned here)
arise from the need to preserve backwards
compatibility for the hundreds of billions of SQLite database files in
circulation.  In a perfect world, there would be no such thing as a "rowid"
and all tables would following the standard semantics implemented as
<a href="withoutrowid.htm">WITHOUT ROWID</a> tables, only without the extra "WITHOUT ROWID" keywords.
Unfortunately, life is messy.  The designer of SQLite offers his
sincere apology for the current mess.
</p></li></ul>
<p align="center"><small><i>This page last modified on  <a href="https://sqlite.org/docsrc/honeypot" id="mtimelink" data-href="https://sqlite.org/docsrc/finfo/pages/rowidtable.in?m=fc4cdc2c7c">2025-05-31 13:08:22</a> UTC </i></small></p>

</body></html>